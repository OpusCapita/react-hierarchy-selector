function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable no-param-reassign */

var index = new WeakMap();

function getHashFromIds(ids) {
  return ids.join('_');
}

function getIdsFromHash(hash) {
  return hash ? hash.split('_') : [];
}

function getFromIndex(obj, ids) {
  var dataIndex = index.get(obj);
  var hash = getHashFromIds(ids);
  return dataIndex[hash] ? Object.assign({}, dataIndex[hash]) : null;
}

function getParents(obj, hash) {
  var parents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var ids = getIdsFromHash(hash);
  if (ids.length > 1) {
    ids.pop();
    var newHash = getHashFromIds(ids);
    var dataIndex = index.get(obj);
    if (dataIndex[newHash] === undefined) throw new Error('Hash \'' + newHash + '\' is missed from an index');
    parents.unshift(dataIndex[newHash].item);
    getParents(obj, newHash, parents);
  }
  return parents;
}

function addIdToHash(hash, addedId) {
  var ids = getIdsFromHash(hash);
  return getHashFromIds([].concat(ids, [addedId]));
}

function createIndex(items) {
  var indexResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var parents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  Object.keys(items).forEach(function (key) {
    var item = items[key];
    var allIds = [].concat(parents, [item.id]);
    var hashKey = getHashFromIds(allIds);
    indexResult[hashKey] = {
      parentHash: getHashFromIds(parents),
      item: item
    };
    if (item.children && Array.isArray(item.children) && item.children.length > 0) {
      createIndex(item.children, indexResult, allIds);
    }
  });

  return indexResult;
}

var DataIndex = function DataIndex(data) {
  var _this = this;

  _classCallCheck(this, DataIndex);

  this.get = function () {
    return Object.assign({}, index.get(_this));
  };

  this.getHash = function (indexItem) {
    if (!indexItem) throw new Error('DataIndex::getParents(): there is no indexItem');
    if (!indexItem.item) throw new Error('DataIndex::getParents(): item is not found in indexItem');

    return addIdToHash(indexItem.parentHash, indexItem.item.id);
  };

  this.getHashFromIds = function (ids) {
    return getHashFromIds(ids);
  };

  this.getParentsByHash = function (hash) {
    return getParents(_this, hash);
  };

  this.getParents = function (indexItem) {
    return getParents(_this, _this.getHash(indexItem));
  };

  this.getFromIndex = function (parentIds, id) {
    return getFromIndex(_this, [].concat(parentIds, [id]));
  };

  this.clone = function () {
    return new DataIndex(_this);
  };

  this.forEach = function (callBack) {
    var dataIndex = index.get(_this);
    Object.keys(dataIndex).forEach(function (key) {
      var indexItem = dataIndex[key];
      callBack(indexItem.item, getIdsFromHash(indexItem.parentHash));
    });
  };

  if (data instanceof DataIndex) {
    index.set(this, data.get());
  } else {
    index.set(this, createIndex(data));
  }
};

export { DataIndex as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvZGF0YS1pbmRleC5qcyJdLCJuYW1lcyI6WyJpbmRleCIsIldlYWtNYXAiLCJnZXRIYXNoRnJvbUlkcyIsImlkcyIsImpvaW4iLCJnZXRJZHNGcm9tSGFzaCIsImhhc2giLCJzcGxpdCIsImdldEZyb21JbmRleCIsIm9iaiIsImRhdGFJbmRleCIsImdldCIsIk9iamVjdCIsImFzc2lnbiIsImdldFBhcmVudHMiLCJwYXJlbnRzIiwibGVuZ3RoIiwicG9wIiwibmV3SGFzaCIsInVuZGVmaW5lZCIsIkVycm9yIiwidW5zaGlmdCIsIml0ZW0iLCJhZGRJZFRvSGFzaCIsImFkZGVkSWQiLCJjcmVhdGVJbmRleCIsIml0ZW1zIiwiaW5kZXhSZXN1bHQiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImFsbElkcyIsImlkIiwiaGFzaEtleSIsInBhcmVudEhhc2giLCJjaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsIkRhdGFJbmRleCIsImRhdGEiLCJnZXRIYXNoIiwiaW5kZXhJdGVtIiwiZ2V0UGFyZW50c0J5SGFzaCIsInBhcmVudElkcyIsImNsb25lIiwiY2FsbEJhY2siLCJzZXQiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsSUFBTUEsUUFBUSxJQUFJQyxPQUFKLEVBQWQ7O0FBRUEsU0FBU0MsY0FBVCxDQUF3QkMsR0FBeEIsRUFBNkI7QUFDM0IsU0FBT0EsSUFBSUMsSUFBSixDQUFTLEdBQVQsQ0FBUDtBQUNEOztBQUVELFNBQVNDLGNBQVQsQ0FBd0JDLElBQXhCLEVBQThCO0FBQzVCLFNBQU9BLE9BQU9BLEtBQUtDLEtBQUwsQ0FBVyxHQUFYLENBQVAsR0FBeUIsRUFBaEM7QUFDRDs7QUFFRCxTQUFTQyxZQUFULENBQXNCQyxHQUF0QixFQUEyQk4sR0FBM0IsRUFBZ0M7QUFDOUIsTUFBTU8sWUFBWVYsTUFBTVcsR0FBTixDQUFVRixHQUFWLENBQWxCO0FBQ0EsTUFBTUgsT0FBT0osZUFBZUMsR0FBZixDQUFiO0FBQ0Es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LE9BQUwsQ0FBYUMsU0FBYixDQUFqQixDQUFiO0FBQUEsR0FyQks7O0FBQUEsT0F1QmxCakMsWUF2QmtCLEdBdUJILFVBQUNtQyxTQUFELEVBQVlYLEVBQVo7QUFBQSxXQUFtQnhCLDhCQUF1Qm1DLFNBQXZCLEdBQWtDWCxFQUFsQyxHQUFuQjtBQUFBLEdBdkJHOztBQUFBLE9BeUJsQlksS0F6QmtCLEdBeUJWO0FBQUEsV0FBTSxJQUFJTixTQUFKLE9BQU47QUFBQSxHQXpCVTs7QUFBQSxPQTJCbEJULE9BM0JrQixHQTJCUixVQUFDZ0IsUUFBRCxFQUFjO0FBQ3RCLFFBQU1uQyxZQUFZVixNQUFNVyxHQUFOLE9BQWxCO0FBQ0FDLFdBQU9nQixJQUFQLENBQVlsQixTQUFaLEVBQXVCbUIsT0FBdkIsQ0FBK0IsVUFBQ0MsR0FBRCxFQUFTO0FBQ3RDLFVBQU1XLFlBQVkvQixVQUFVb0IsR0FBVixDQUFsQjtBQUNBZSxlQUFTSixVQUFVbkIsSUFBbkIsRUFBeUJqQixlQUFlb0MsVUFBVVAsVUFBekIsQ0FBekI7QUFDRCxLQUhEO0FBSUQsR0FqQ2lCOztBQUNoQixNQUFJSyxnQkFBZ0JELFNBQXBCLEVBQStCO0FBQzdCdEMsVUFBTThDLEdBQU4sQ0FBVSxJQUFWLEVBQWdCUCxLQUFLNUIsR0FBTCxFQUFoQjtBQUNELEdBRkQsTUFFTztBQUNMWCxVQUFNOEMsR0FBTixDQUFVLElBQVYsRUFBZ0JyQixZQUFZYyxJQUFaLENBQWhCO0FBQ0Q7QUFDRixDOztTQVBrQkQsUyIsImZpbGUiOiJkYXRhLWluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxuY29uc3QgaW5kZXggPSBuZXcgV2Vha01hcCgpO1xuXG5mdW5jdGlvbiBnZXRIYXNoRnJvbUlkcyhpZHMpIHtcbiAgcmV0dXJuIGlkcy5qb2luKCdfJyk7XG59XG5cbmZ1bmN0aW9uIGdldElkc0Zyb21IYXNoKGhhc2gpIHtcbiAgcmV0dXJuIGhhc2ggPyBoYXNoLnNwbGl0KCdfJykgOiBbXTtcbn1cblxuZnVuY3Rpb24gZ2V0RnJvbUluZGV4KG9iaiwgaWRzKSB7XG4gIGNvbnN0IGRhdGFJbmRleCA9IGluZGV4LmdldChvYmopO1xuICBjb25zdCBoYXNoID0gZ2V0SGFzaEZyb21JZHMoaWRzKTtcbiAgcmV0dXJuIGRhdGFJbmRleFtoYXNoXSA/IE9iamVjdC5hc3NpZ24oe30sIGRhdGFJbmRleFtoYXNoXSkgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnRzKG9iaiwgaGFzaCwgcGFyZW50cyA9IFtdKSB7XG4gIGNvbnN0IGlkcyA9IGdldElkc0Zyb21IYXNoKGhhc2gpO1xuICBpZiAoaWRzLmxlbmd0aCA+IDEpIHtcbiAgICBpZHMucG9wKCk7XG4gICAgY29uc3QgbmV3SGFzaCA9IGdldEhhc2hGcm9tSWRzKGlkcyk7XG4gICAgY29uc3QgZGF0YUluZGV4ID0gaW5kZXguZ2V0KG9iaik7XG4gICAgaWYgKGRhdGFJbmRleFtuZXdIYXNoXSA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoYEhhc2ggJyR7bmV3SGFzaH0nIGlzIG1pc3NlZCBmcm9tIGFuIGluZGV4YCk7XG4gICAgcGFyZW50cy51bnNoaWZ0KGRhdGFJbmRleFtuZXdIYXNoXS5pdGVtKTtcbiAgICBnZXRQYXJlbnRzKG9iaiwgbmV3SGFzaCwgcGFyZW50cyk7XG4gIH1cbiAgcmV0dXJuIHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIGFkZElkVG9IYXNoKGhhc2gsIGFkZGVkSWQpIHtcbiAgY29uc3QgaWRzID0gZ2V0SWRzRnJvbUhhc2goaGFzaCk7XG4gIHJldHVybiBnZXRIYXNoRnJvbUlkcyhbLi4uaWRzLCBhZGRlZElkXSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUluZGV4KGl0ZW1zLCBpbmRleFJlc3VsdCA9IHt9LCBwYXJlbnRzID0gW10pIHtcbiAgT2JqZWN0LmtleXMoaXRlbXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1trZXldO1xuICAgIGNvbnN0IGFsbElkcyA9IFsuLi5wYXJlbnRzLCBpdGVtLmlkXTtcbiAgICBjb25zdCBoYXNoS2V5ID0gZ2V0SGFzaEZyb21JZHMoYWxsSWRzKTtcbiAgICBpbmRleFJlc3VsdFtoYXNoS2V5XSA9IHtcbiAgICAgIHBhcmVudEhhc2g6IGdldEhhc2hGcm9tSWRzKHBhcmVudHMpLFxuICAgICAgaXRlbSxcbiAgICB9O1xuICAgIGlmIChpdGVtLmNoaWxkcmVuICYmIEFycmF5LmlzQXJyYXkoaXRlbS5jaGlsZHJlbikgJiYgaXRlbS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBjcmVhdGVJbmRleChpdGVtLmNoaWxkcmVuLCBpbmRleFJlc3VsdCwgYWxsSWRzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBpbmRleFJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YUluZGV4IHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRGF0YUluZGV4KSB7XG4gICAgICBpbmRleC5zZXQodGhpcywgZGF0YS5nZXQoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4LnNldCh0aGlzLCBjcmVhdGVJbmRleChkYXRhKSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0ID0gKCkgPT4gT2JqZWN0LmFzc2lnbih7fSwgaW5kZXguZ2V0KHRoaXMpKTtcblxuICBnZXRIYXNoID0gKGluZGV4SXRlbSkgPT4ge1xuICAgIGlmICghaW5kZXhJdGVtKSB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFJbmRleDo6Z2V0UGFyZW50cygpOiB0aGVyZSBpcyBubyBpbmRleEl0ZW0nKTtcbiAgICBpZiAoIWluZGV4SXRlbS5pdGVtKSB0aHJvdyBuZXcgRXJyb3IoJ0RhdGFJbmRleDo6Z2V0UGFyZW50cygpOiBpdGVtIGlzIG5vdCBmb3VuZCBpbiBpbmRleEl0ZW0nKTtcblxuICAgIHJldHVybiBhZGRJZFRvSGFzaChpbmRleEl0ZW0ucGFyZW50SGFzaCwgaW5kZXhJdGVtLml0ZW0uaWQpO1xuICB9XG5cbiAgZ2V0SGFzaEZyb21JZHMgPSBpZHMgPT4gZ2V0SGFzaEZyb21JZHMoaWRzKTtcblxuICBnZXRQYXJlbnRzQnlIYXNoID0gaGFzaCA9PiBnZXRQYXJlbnRzKHRoaXMsIGhhc2gpO1xuXG4gIGdldFBhcmVudHMgPSBpbmRleEl0ZW0gPT4gZ2V0UGFyZW50cyh0aGlzLCB0aGlzLmdldEhhc2goaW5kZXhJdGVtKSk7XG5cbiAgZ2V0RnJvbUluZGV4ID0gKHBhcmVudElkcywgaWQpID0+IGdldEZyb21JbmRleCh0aGlzLCBbLi4ucGFyZW50SWRzLCBpZF0pXG5cbiAgY2xvbmUgPSAoKSA9PiBuZXcgRGF0YUluZGV4KHRoaXMpO1xuXG4gIGZvckVhY2ggPSAoY2FsbEJhY2spID0+IHtcbiAgICBjb25zdCBkYXRhSW5kZXggPSBpbmRleC5nZXQodGhpcyk7XG4gICAgT2JqZWN0LmtleXMoZGF0YUluZGV4KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4SXRlbSA9IGRhdGFJbmRleFtrZXldO1xuICAgICAgY2FsbEJhY2soaW5kZXhJdGVtLml0ZW0sIGdldElkc0Zyb21IYXNoKGluZGV4SXRlbS5wYXJlbnRIYXNoKSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==