function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-param-reassign */
var index = new WeakMap();

function getHashFromIds(ids) {
  return ids.join('_');
}

function getIdsFromHash(hash) {
  return hash ? hash.split('_') : [];
}

function getFromIndex(obj, ids) {
  var dataIndex = index.get(obj);
  var hash = getHashFromIds(ids);
  return dataIndex[hash] ? Object.assign({}, dataIndex[hash]) : null;
}

function getParents(obj, hash, parents) {
  if (parents === void 0) {
    parents = [];
  }

  var ids = getIdsFromHash(hash);

  if (ids.length > 1) {
    ids.pop();
    var newHash = getHashFromIds(ids);
    var dataIndex = index.get(obj);
    if (dataIndex[newHash] === undefined) throw new Error("Hash '" + newHash + "' is missed from an index");
    parents.unshift(dataIndex[newHash].item);
    getParents(obj, newHash, parents);
  }

  return parents;
}

function addIdToHash(hash, addedId) {
  var ids = getIdsFromHash(hash);
  return getHashFromIds([].concat(ids, [addedId]));
}

function createIndex(items, indexResult, parents) {
  if (indexResult === void 0) {
    indexResult = {};
  }

  if (parents === void 0) {
    parents = [];
  }

  Object.keys(items).forEach(function (key) {
    var item = items[key];
    var allIds = [].concat(parents, [item.id]);
    var hashKey = getHashFromIds(allIds);
    indexResult[hashKey] = {
      parentHash: getHashFromIds(parents),
      item: item
    };

    if (item.children && Array.isArray(item.children) && item.children.length > 0) {
      createIndex(item.children, indexResult, allIds);
    }
  });
  return indexResult;
}

var DataIndex = function DataIndex(data) {
  var _this = this;

  _defineProperty(this, "get", function () {
    return Object.assign({}, index.get(_this));
  });

  _defineProperty(this, "getHash", function (indexItem) {
    if (!indexItem) throw new Error('DataIndex::getParents(): there is no indexItem');
    if (!indexItem.item) throw new Error('DataIndex::getParents(): item is not found in indexItem');
    return addIdToHash(indexItem.parentHash, indexItem.item.id);
  });

  _defineProperty(this, "getHashFromIds", function (ids) {
    return getHashFromIds(ids);
  });

  _defineProperty(this, "getParentsByHash", function (hash) {
    return getParents(_this, hash);
  });

  _defineProperty(this, "getParents", function (indexItem) {
    return getParents(_this, _this.getHash(indexItem));
  });

  _defineProperty(this, "getFromIndex", function (parentIds, id) {
    return getFromIndex(_this, [].concat(parentIds, [id]));
  });

  _defineProperty(this, "clone", function () {
    return new DataIndex(_this);
  });

  _defineProperty(this, "forEach", function (callBack) {
    var dataIndex = index.get(_this);
    Object.keys(dataIndex).forEach(function (key) {
      var indexItem = dataIndex[key];
      callBack(indexItem.item, getIdsFromHash(indexItem.parentHash));
    });
  });

  if (data instanceof DataIndex) {
    index.set(this, data.get());
  } else {
    index.set(this, createIndex(data));
  }
};

export { DataIndex as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,