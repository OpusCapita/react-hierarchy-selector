function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var output = new WeakMap();

function getOutputObject(item, parentIds, isCheckedAll) {
  var currentItem = item ? Object.assign({}, item) : {};

  currentItem.id = currentItem.id || null;
  currentItem.name = currentItem.name || '';
  currentItem.children = currentItem.children || [];

  return {
    id: currentItem.id,
    name: currentItem.name,
    level: parentIds.length + 1,
    parentId: parentIds.length > 0 ? parentIds[parentIds.length - 1] : null,
    parentIds: parentIds,
    isCheckedAll: isCheckedAll,
    isChildren: Array.isArray(currentItem.children) && currentItem.children.length > 0
  };
}

function addToOutput(obj, checkedHashItem) {
  var currentOutput = output.get(obj);
  var isCheckedAll = checkedHashItem.isCheckedAll();
  var parents = checkedHashItem.getParents();

  if (isCheckedAll) {
    var item = parents[parents.length - 1];
    parents.pop();
    var parentIds = parents.map(function (i) {
      return i.id;
    });
    currentOutput.push(getOutputObject(item, parentIds, isCheckedAll));
  } else {
    var checkedItems = checkedHashItem.getCheckedItems();
    var _parentIds = parents.map(function (i) {
      return i.id;
    });
    checkedItems.forEach(function (item) {
      currentOutput.push(getOutputObject(item, _parentIds, isCheckedAll));
    });
  }
}

var CheckedOutput = function CheckedOutput() {
  var _this = this;

  _classCallCheck(this, CheckedOutput);

  this.get = function () {
    return output.get(_this).slice();
  };

  this.add = function (checkedHashItem) {
    addToOutput(_this, checkedHashItem);
  };

  this.clear = function () {
    output.get(_this).splice(0);
  };

  output.set(this, []);
};

export { CheckedOutput as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2hlY2tlZC1pdGVtcy9jaGVja2VkLW91dHB1dC5qcyJdLCJuYW1lcyI6WyJvdXRwdXQiLCJXZWFrTWFwIiwiZ2V0T3V0cHV0T2JqZWN0IiwiaXRlbSIsInBhcmVudElkcyIsImlzQ2hlY2tlZEFsbCIsImN1cnJlbnRJdGVtIiwiT2JqZWN0IiwiYXNzaWduIiwiaWQiLCJuYW1lIiwiY2hpbGRyZW4iLCJsZXZlbCIsImxlbmd0aCIsInBhcmVudElkIiwiaXNDaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsImFkZFRvT3V0cHV0Iiwib2JqIiwiY2hlY2tlZEhhc2hJdGVtIiwiY3VycmVudE91dHB1dCIsImdldCIsInBhcmVudHMiLCJnZXRQYXJlbnRzIiwicG9wIiwibWFwIiwiaSIsInB1c2giLCJjaGVja2VkSXRlbXMiLCJnZXRDaGVja2VkSXRlbXMiLCJmb3JFYWNoIiwiQ2hlY2tlZE91dHB1dCIsInNsaWNlIiwiYWRkIiwiY2xlYXIiLCJzcGxpY2UiLCJzZXQiXSwibWFwcGluZ3MiOiI7O0FBQ0EsSUFBTUEsU0FBUyxJQUFJQyxPQUFKLEVBQWY7O0FBRUEsU0FBU0MsZUFBVCxDQUF5QkMsSUFBekIsRUFBK0JDLFNBQS9CLEVBQTBDQyxZQUExQyxFQUF3RDtBQUN0RCxNQUFNQyxjQUFjSCxPQUFPSSxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQkwsSUFBbEIsQ0FBUCxHQUFpQyxFQUFyRDs7QUFFQUcsY0FBWUcsRUFBWixHQUFpQkgsWUFBWUcsRUFBWixJQUFrQixJQUFuQztBQUNBSCxjQUFZSSxJQUFaLEdBQW1CSixZQUFZSSxJQUFaLElBQW9CLEVBQXZDO0FBQ0FKLGNBQVlLLFFBQVosR0FBdUJMLFlBQVlLLFFBQVosSUFBd0IsRUFBL0M7O0FBRUEsU0FBTztBQUNMRixRQUFJSCxZQUFZRyxFQURYO0FBRUxDLFVBQU1KLFlBQVlJLElBRmI7QUFHTEUsV0FBT1IsVUFBVVMsTUFBVixHQUFtQixDQUhyQjtBQUlMQyxjQUFVVixVQUFVUyxNQUFWLEdBQW1CLENBQW5CLEdBQXVCVCxVQUFVQSxVQUFVUyxNQUFWLEdBQW1CLENBQTdCLENBQXZCLEdBQXlELElBSjlEO0FBS0xULHdCQUxLO0FBTUxDLDhCQU5LO0FBT0xVLGdCQUFZQyxNQUFNQyxPQUFOLENBQWNYLFlBQVlLLFFBQTFCLEtBQXVDTCxZQUFZSyxRQUFaLENBQXFCRSxNQUFyQixHQUE4QjtBQVA1RSxHQUFQO0FBU0Q7O0FBRUQsU0FBU0ssV0FBVCxDQUFxQkMsR0FBckIsRUFBMEJDLGVBQTFCLEVBQTJDO0FBQ3pDLE1BQU1DLGdCQUFnQnJCLE9BQU9zQixHQUFQLENBQVdILEdBQVgsQ0FBdEI7QUFDQSxNQUFNZCxlQUFlZSxnQkFBZ0JmLFlBQWhCLEVBQXJCO0FBQ0EsTUFBTWtCLFVBQVVILGdCQUFnQkksVUFBaEIsRUFBaEI7O0FBRUEsTUFBSW5CLFlBQUosRUFBa0I7QUFDaEIsUUFBTUYsT0FBT29CLFFBQVFBLFFBQVFWLE1BQVIsR0FBaUIsQ0FBekIsQ0FBYjtBQUNBVSxZQUFRRSxHQUFSO0FBQ0EsUUFBTXJCLFlBQVltQixRQUFRRyxHQUFSLENBQVk7QUFBQSxhQUFLQyxFQUFFbEIsRUFBUDtBQUFBLEtBQVosQ0FBbEI7QUFDQVksa0JBQWNPLElBQWQsQ0FBbUIxQixnQkFBZ0JDLElBQWhCLEVBQXNCQyxTQUF0QixFQUFpQ0MsWUFBakMsQ0FBbkI7QUFDRCxHQUxELE1BS087QUFDTCxRQUFNd0IsZUFBZVQsZ0JBQWdCVSxlQUFoQixFQUFyQjtBQUNBLFFBQU0xQixhQUFZbUIsUUFBUUcsR0FBUixDQUFZO0FBQUEsYUFBS0MsRUFBRWxCLEVBQVA7QUFBQSxLQUFaLENBQWxCO0FBQ0FvQixpQkFBYUUsT0FBYixDQUFxQixVQUFDNUIsSUFBRCxFQUFVO0FBQzdCa0Isb0JBQWNPLElBQWQsQ0FBbUIxQixnQkFBZ0JDLElBQWhCLEVBQXNCQyxVQUF0QixFQUFpQ0MsWUFBakMsQ0FBbkI7QUFDRCxLQUZEO0FBR0Q7QUFDRjs7SUFFb0IyQixhLEdBQ25CLHlCQUFjO0FBQUE7O0FBQUE7O0FBQUEsT0FJZFYsR0FKYyxHQUlSO0FBQUEsV0FBTXRCLE9BQU9zQixHQUFQLFFBQWlCVyxLQUFqQixFQUFOO0FBQUEsR0FKUTs7QUFBQSxPQU1kQyxHQU5jLEdBTVIsVUFBQ2QsZUFBRCxFQUFxQjtBQUN6QkYsdUJBQWtCRSxlQUFsQjtBQUNELEdBUmE7O0FBQUEsT0FVZGUsS0FWYyxHQVVOLFlBQU07QUFDWm5DLFdBQU9zQixHQUFQLFFBQWlCYyxNQUFqQixDQUF3QixDQUF4QjtBQUNELEdBWmE7O0FBQ1pwQyxTQUFPcUMsR0FBUCxDQUFXLElBQVgsRUFBaUIsRUFBakI7QUFDRCxDOztTQUhrQkwsYSIsImZpbGUiOiJjaGVja2VkLW91dHB1dC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3Qgb3V0cHV0ID0gbmV3IFdlYWtNYXAoKTtcblxuZnVuY3Rpb24gZ2V0T3V0cHV0T2JqZWN0KGl0ZW0sIHBhcmVudElkcywgaXNDaGVja2VkQWxsKSB7XG4gIGNvbnN0IGN1cnJlbnRJdGVtID0gaXRlbSA/IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pIDoge307XG5cbiAgY3VycmVudEl0ZW0uaWQgPSBjdXJyZW50SXRlbS5pZCB8fCBudWxsO1xuICBjdXJyZW50SXRlbS5uYW1lID0gY3VycmVudEl0ZW0ubmFtZSB8fCAnJztcbiAgY3VycmVudEl0ZW0uY2hpbGRyZW4gPSBjdXJyZW50SXRlbS5jaGlsZHJlbiB8fCBbXTtcblxuICByZXR1cm4ge1xuICAgIGlkOiBjdXJyZW50SXRlbS5pZCxcbiAgICBuYW1lOiBjdXJyZW50SXRlbS5uYW1lLFxuICAgIGxldmVsOiBwYXJlbnRJZHMubGVuZ3RoICsgMSxcbiAgICBwYXJlbnRJZDogcGFyZW50SWRzLmxlbmd0aCA+IDAgPyBwYXJlbnRJZHNbcGFyZW50SWRzLmxlbmd0aCAtIDFdIDogbnVsbCxcbiAgICBwYXJlbnRJZHMsXG4gICAgaXNDaGVja2VkQWxsLFxuICAgIGlzQ2hpbGRyZW46IEFycmF5LmlzQXJyYXkoY3VycmVudEl0ZW0uY2hpbGRyZW4pICYmIGN1cnJlbnRJdGVtLmNoaWxkcmVuLmxlbmd0aCA+IDAsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZFRvT3V0cHV0KG9iaiwgY2hlY2tlZEhhc2hJdGVtKSB7XG4gIGNvbnN0IGN1cnJlbnRPdXRwdXQgPSBvdXRwdXQuZ2V0KG9iaik7XG4gIGNvbnN0IGlzQ2hlY2tlZEFsbCA9IGNoZWNrZWRIYXNoSXRlbS5pc0NoZWNrZWRBbGwoKTtcbiAgY29uc3QgcGFyZW50cyA9IGNoZWNrZWRIYXNoSXRlbS5nZXRQYXJlbnRzKCk7XG5cbiAgaWYgKGlzQ2hlY2tlZEFsbCkge1xuICAgIGNvbnN0IGl0ZW0gPSBwYXJlbnRzW3BhcmVudHMubGVuZ3RoIC0gMV07XG4gICAgcGFyZW50cy5wb3AoKTtcbiAgICBjb25zdCBwYXJlbnRJZHMgPSBwYXJlbnRzLm1hcChpID0+IGkuaWQpO1xuICAgIGN1cnJlbnRPdXRwdXQucHVzaChnZXRPdXRwdXRPYmplY3QoaXRlbSwgcGFyZW50SWRzLCBpc0NoZWNrZWRBbGwpKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBjaGVja2VkSXRlbXMgPSBjaGVja2VkSGFzaEl0ZW0uZ2V0Q2hlY2tlZEl0ZW1zKCk7XG4gICAgY29uc3QgcGFyZW50SWRzID0gcGFyZW50cy5tYXAoaSA9PiBpLmlkKTtcbiAgICBjaGVja2VkSXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgY3VycmVudE91dHB1dC5wdXNoKGdldE91dHB1dE9iamVjdChpdGVtLCBwYXJlbnRJZHMsIGlzQ2hlY2tlZEFsbCkpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoZWNrZWRPdXRwdXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBvdXRwdXQuc2V0KHRoaXMsIFtdKTtcbiAgfVxuXG4gIGdldCA9ICgpID0+IG91dHB1dC5nZXQodGhpcykuc2xpY2UoKTtcblxuICBhZGQgPSAoY2hlY2tlZEhhc2hJdGVtKSA9PiB7XG4gICAgYWRkVG9PdXRwdXQodGhpcywgY2hlY2tlZEhhc2hJdGVtKTtcbiAgfVxuXG4gIGNsZWFyID0gKCkgPT4ge1xuICAgIG91dHB1dC5nZXQodGhpcykuc3BsaWNlKDApO1xuICB9XG59XG4iXX0=