function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var output = new WeakMap();

function getOutputObject(item, parentIds, isCheckedAll) {
  var currentItem = item ? Object.assign({}, item) : {};
  currentItem.id = currentItem.id || null;
  currentItem.name = currentItem.name || '';
  currentItem.children = currentItem.children || [];
  return {
    id: currentItem.id,
    name: currentItem.name,
    level: parentIds.length + 1,
    parentId: parentIds.length > 0 ? parentIds[parentIds.length - 1] : null,
    parentIds: parentIds,
    isCheckedAll: isCheckedAll,
    isChildren: Array.isArray(currentItem.children) && currentItem.children.length > 0
  };
}

function addToOutput(obj, checkedHashItem) {
  var currentOutput = output.get(obj);
  var isCheckedAll = checkedHashItem.isCheckedAll();
  var parents = checkedHashItem.getParents();

  if (isCheckedAll) {
    var item = parents[parents.length - 1];
    parents.pop();
    var parentIds = parents.map(function (i) {
      return i.id;
    });
    currentOutput.push(getOutputObject(item, parentIds, isCheckedAll));
  } else {
    var checkedItems = checkedHashItem.getCheckedItems();

    var _parentIds = parents.map(function (i) {
      return i.id;
    });

    checkedItems.forEach(function (item) {
      currentOutput.push(getOutputObject(item, _parentIds, isCheckedAll));
    });
  }
}

var CheckedOutput = function CheckedOutput() {
  var _this = this;

  _defineProperty(this, "get", function () {
    return output.get(_this).slice();
  });

  _defineProperty(this, "add", function (checkedHashItem) {
    addToOutput(_this, checkedHashItem);
  });

  _defineProperty(this, "clear", function () {
    output.get(_this).splice(0);
  });

  output.set(this, []);
};

export { CheckedOutput as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2hlY2tlZC1pdGVtcy9jaGVja2VkLW91dHB1dC5qcyJdLCJuYW1lcyI6WyJvdXRwdXQiLCJXZWFrTWFwIiwiZ2V0T3V0cHV0T2JqZWN0IiwiaXRlbSIsInBhcmVudElkcyIsImlzQ2hlY2tlZEFsbCIsImN1cnJlbnRJdGVtIiwiT2JqZWN0IiwiYXNzaWduIiwiaWQiLCJuYW1lIiwiY2hpbGRyZW4iLCJsZXZlbCIsImxlbmd0aCIsInBhcmVudElkIiwiaXNDaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsImFkZFRvT3V0cHV0Iiwib2JqIiwiY2hlY2tlZEhhc2hJdGVtIiwiY3VycmVudE91dHB1dCIsImdldCIsInBhcmVudHMiLCJnZXRQYXJlbnRzIiwicG9wIiwibWFwIiwiaSIsInB1c2giLCJjaGVja2VkSXRlbXMiLCJnZXRDaGVja2VkSXRlbXMiLCJmb3JFYWNoIiwiQ2hlY2tlZE91dHB1dCIsInNsaWNlIiwic3BsaWNlIiwic2V0Il0sIm1hcHBpbmdzIjoiOztBQUNBLElBQU1BLE1BQU0sR0FBRyxJQUFJQyxPQUFKLEVBQWY7O0FBRUEsU0FBU0MsZUFBVCxDQUF5QkMsSUFBekIsRUFBK0JDLFNBQS9CLEVBQTBDQyxZQUExQyxFQUF3RDtBQUN0RCxNQUFNQyxXQUFXLEdBQUdILElBQUksR0FBR0ksTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkwsSUFBbEIsQ0FBSCxHQUE2QixFQUFyRDtBQUVBRyxFQUFBQSxXQUFXLENBQUNHLEVBQVosR0FBaUJILFdBQVcsQ0FBQ0csRUFBWixJQUFrQixJQUFuQztBQUNBSCxFQUFBQSxXQUFXLENBQUNJLElBQVosR0FBbUJKLFdBQVcsQ0FBQ0ksSUFBWixJQUFvQixFQUF2QztBQUNBSixFQUFBQSxXQUFXLENBQUNLLFFBQVosR0FBdUJMLFdBQVcsQ0FBQ0ssUUFBWixJQUF3QixFQUEvQztBQUVBLFNBQU87QUFDTEYsSUFBQUEsRUFBRSxFQUFFSCxXQUFXLENBQUNHLEVBRFg7QUFFTEMsSUFBQUEsSUFBSSxFQUFFSixXQUFXLENBQUNJLElBRmI7QUFHTEUsSUFBQUEsS0FBSyxFQUFFUixTQUFTLENBQUNTLE1BQVYsR0FBbUIsQ0FIckI7QUFJTEMsSUFBQUEsUUFBUSxFQUFFVixTQUFTLENBQUNTLE1BQVYsR0FBbUIsQ0FBbkIsR0FBdUJULFNBQVMsQ0FBQ0EsU0FBUyxDQUFDUyxNQUFWLEdBQW1CLENBQXBCLENBQWhDLEdBQXlELElBSjlEO0FBS0xULElBQUFBLFNBQVMsRUFBVEEsU0FMSztBQU1MQyxJQUFBQSxZQUFZLEVBQVpBLFlBTks7QUFPTFUsSUFBQUEsVUFBVSxFQUFFQyxLQUFLLENBQUNDLE9BQU4sQ0FBY1gsV0FBVyxDQUFDSyxRQUExQixLQUF1Q0wsV0FBVyxDQUFDSyxRQUFaLENBQXFCRSxNQUFyQixHQUE4QjtBQVA1RSxHQUFQO0FBU0Q7O0FBRUQsU0FBU0ssV0FBVCxDQUFxQkMsR0FBckIsRUFBMEJDLGVBQTFCLEVBQTJDO0FBQ3pDLE1BQU1DLGFBQWEsR0FBR3JCLE1BQU0sQ0FBQ3NCLEdBQVAsQ0FBV0gsR0FBWCxDQUF0QjtBQUNBLE1BQU1kLFlBQVksR0FBR2UsZUFBZSxDQUFDZixZQUFoQixFQUFyQjtBQUNBLE1BQU1rQixPQUFPLEdBQUdILGVBQWUsQ0FBQ0ksVUFBaEIsRUFBaEI7O0FBRUEsTUFBSW5CLFlBQUosRUFBa0I7QUFDaEIsUUFBTUYsSUFBSSxHQUFHb0IsT0FBTyxDQUFDQSxPQUFPLENBQUNWLE1BQVIsR0FBaUIsQ0FBbEIsQ0FBcEI7QUFDQVUsSUFBQUEsT0FBTyxDQUFDRSxHQUFSO0FBQ0EsUUFBTXJCLFNBQVMsR0FBR21CLE9BQU8sQ0FBQ0csR0FBUixDQUFZLFVBQUFDLENBQUM7QUFBQSxhQUFJQSxDQUFDLENBQUNsQixFQUFOO0FBQUEsS0FBYixDQUFsQjtBQUNBWSxJQUFBQSxhQUFhLENBQUNPLElBQWQsQ0FBbUIxQixlQUFlLENBQUNDLElBQUQsRUFBT0MsU0FBUCxFQUFrQkMsWUFBbEIsQ0FBbEM7QUFDRCxHQUxELE1BS087QUFDTCxRQUFNd0IsWUFBWSxHQUFHVCxlQUFlLENBQUNVLGVBQWhCLEVBQXJCOztBQUNBLFFBQU0xQixVQUFTLEdBQUdtQixPQUFPLENBQUNHLEdBQVIsQ0FBWSxVQUFBQyxDQUFDO0FBQUEsYUFBSUEsQ0FBQyxDQUFDbEIsRUFBTjtBQUFBLEtBQWIsQ0FBbEI7O0FBQ0FvQixJQUFBQSxZQUFZLENBQUNFLE9BQWIsQ0FBcUIsVUFBQzVCLElBQUQsRUFBVTtBQUM3QmtCLE1BQUFBLGFBQWEsQ0FBQ08sSUFBZCxDQUFtQjFCLGVBQWUsQ0FBQ0MsSUFBRCxFQUFPQyxVQUFQLEVBQWtCQyxZQUFsQixDQUFsQztBQUNELEtBRkQ7QUFHRDtBQUNGOztJQUVvQjJCLGEsR0FDbkIseUJBQWM7QUFBQTs7QUFBQSwrQkFJUjtBQUFBLFdBQU1oQyxNQUFNLENBQUNzQixHQUFQLENBQVcsS0FBWCxFQUFpQlcsS0FBakIsRUFBTjtBQUFBLEdBSlE7O0FBQUEsK0JBTVIsVUFBQ2IsZUFBRCxFQUFxQjtBQUN6QkYsSUFBQUEsV0FBVyxDQUFDLEtBQUQsRUFBT0UsZUFBUCxDQUFYO0FBQ0QsR0FSYTs7QUFBQSxpQ0FVTixZQUFNO0FBQ1pwQixJQUFBQSxNQUFNLENBQUNzQixHQUFQLENBQVcsS0FBWCxFQUFpQlksTUFBakIsQ0FBd0IsQ0FBeEI7QUFDRCxHQVphOztBQUNabEMsRUFBQUEsTUFBTSxDQUFDbUMsR0FBUCxDQUFXLElBQVgsRUFBaUIsRUFBakI7QUFDRCxDOztTQUhrQkgsYSIsInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3Qgb3V0cHV0ID0gbmV3IFdlYWtNYXAoKTtcblxuZnVuY3Rpb24gZ2V0T3V0cHV0T2JqZWN0KGl0ZW0sIHBhcmVudElkcywgaXNDaGVja2VkQWxsKSB7XG4gIGNvbnN0IGN1cnJlbnRJdGVtID0gaXRlbSA/IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pIDoge307XG5cbiAgY3VycmVudEl0ZW0uaWQgPSBjdXJyZW50SXRlbS5pZCB8fCBudWxsO1xuICBjdXJyZW50SXRlbS5uYW1lID0gY3VycmVudEl0ZW0ubmFtZSB8fCAnJztcbiAgY3VycmVudEl0ZW0uY2hpbGRyZW4gPSBjdXJyZW50SXRlbS5jaGlsZHJlbiB8fCBbXTtcblxuICByZXR1cm4ge1xuICAgIGlkOiBjdXJyZW50SXRlbS5pZCxcbiAgICBuYW1lOiBjdXJyZW50SXRlbS5uYW1lLFxuICAgIGxldmVsOiBwYXJlbnRJZHMubGVuZ3RoICsgMSxcbiAgICBwYXJlbnRJZDogcGFyZW50SWRzLmxlbmd0aCA+IDAgPyBwYXJlbnRJZHNbcGFyZW50SWRzLmxlbmd0aCAtIDFdIDogbnVsbCxcbiAgICBwYXJlbnRJZHMsXG4gICAgaXNDaGVja2VkQWxsLFxuICAgIGlzQ2hpbGRyZW46IEFycmF5LmlzQXJyYXkoY3VycmVudEl0ZW0uY2hpbGRyZW4pICYmIGN1cnJlbnRJdGVtLmNoaWxkcmVuLmxlbmd0aCA+IDAsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZFRvT3V0cHV0KG9iaiwgY2hlY2tlZEhhc2hJdGVtKSB7XG4gIGNvbnN0IGN1cnJlbnRPdXRwdXQgPSBvdXRwdXQuZ2V0KG9iaik7XG4gIGNvbnN0IGlzQ2hlY2tlZEFsbCA9IGNoZWNrZWRIYXNoSXRlbS5pc0NoZWNrZWRBbGwoKTtcbiAgY29uc3QgcGFyZW50cyA9IGNoZWNrZWRIYXNoSXRlbS5nZXRQYXJlbnRzKCk7XG5cbiAgaWYgKGlzQ2hlY2tlZEFsbCkge1xuICAgIGNvbnN0IGl0ZW0gPSBwYXJlbnRzW3BhcmVudHMubGVuZ3RoIC0gMV07XG4gICAgcGFyZW50cy5wb3AoKTtcbiAgICBjb25zdCBwYXJlbnRJZHMgPSBwYXJlbnRzLm1hcChpID0+IGkuaWQpO1xuICAgIGN1cnJlbnRPdXRwdXQucHVzaChnZXRPdXRwdXRPYmplY3QoaXRlbSwgcGFyZW50SWRzLCBpc0NoZWNrZWRBbGwpKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBjaGVja2VkSXRlbXMgPSBjaGVja2VkSGFzaEl0ZW0uZ2V0Q2hlY2tlZEl0ZW1zKCk7XG4gICAgY29uc3QgcGFyZW50SWRzID0gcGFyZW50cy5tYXAoaSA9PiBpLmlkKTtcbiAgICBjaGVja2VkSXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgY3VycmVudE91dHB1dC5wdXNoKGdldE91dHB1dE9iamVjdChpdGVtLCBwYXJlbnRJZHMsIGlzQ2hlY2tlZEFsbCkpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoZWNrZWRPdXRwdXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBvdXRwdXQuc2V0KHRoaXMsIFtdKTtcbiAgfVxuXG4gIGdldCA9ICgpID0+IG91dHB1dC5nZXQodGhpcykuc2xpY2UoKTtcblxuICBhZGQgPSAoY2hlY2tlZEhhc2hJdGVtKSA9PiB7XG4gICAgYWRkVG9PdXRwdXQodGhpcywgY2hlY2tlZEhhc2hJdGVtKTtcbiAgfVxuXG4gIGNsZWFyID0gKCkgPT4ge1xuICAgIG91dHB1dC5nZXQodGhpcykuc3BsaWNlKDApO1xuICB9XG59XG4iXX0=