function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable array-callback-return */

var parents = new WeakMap();
var checkedAll = new WeakMap();
var checkedItemsBackUp = new WeakMap();
var checkedItems = new WeakMap();

function addChildren(that, item) {
  if (item) {
    if (item.children && Array.isArray(item.children) && item.children.length > 0) {
      item.children.forEach(function (child) {
        addChildren(that, child);
      });
    } else {
      that.addCheckedItem(item);
    }
  }
}

var CheckedHashItem = function () {
  function CheckedHashItem() {
    var prnts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, CheckedHashItem);

    this.timestamp = Date.now();
    parents.set(this, prnts.slice());
    checkedAll.set(this, false);
    checkedItems.set(this, []);
    checkedItemsBackUp.set(this, []);
  }

  CheckedHashItem.prototype.getParents = function getParents() {
    return parents.get(this).slice();
  };

  CheckedHashItem.prototype.getCheckedItems = function getCheckedItems() {
    return checkedItems.get(this).slice();
  };

  CheckedHashItem.prototype.checkAll = function checkAll() {
    var prnts = parents.get(this);
    checkedAll.set(this, true);
    this.clearChecked();
    var initialParent = prnts.length > 0 ? prnts[prnts.length - 1] : undefined;

    if (initialParent) addChildren(this, initialParent);
  };

  CheckedHashItem.prototype.uncheckAll = function uncheckAll() {
    checkedAll.set(this, false);
    this.clearChecked();
  };

  CheckedHashItem.prototype.isCheckedAll = function isCheckedAll() {
    return checkedAll.get(this);
  };

  CheckedHashItem.prototype.clearChecked = function clearChecked() {
    checkedItems.get(this).splice(0);
  };

  CheckedHashItem.prototype.addCheckedItem = function addCheckedItem(item) {
    checkedItems.get(this).push(item);
  };

  CheckedHashItem.prototype.removeCheckedItem = function removeCheckedItem(item) {
    var items = checkedItems.get(this);
    items.reduceRight(function (acc, currentItem, index, currentItems) {
      if (currentItem.id === item.id) {
        currentItems.splice(index, 1);
      }
    }, []);
  };

  CheckedHashItem.prototype.createCopy = function createCopy() {
    var copy = new CheckedHashItem();

    parents.set(copy, [].concat(parents.get(this)));
    checkedAll.set(copy, checkedAll.get(this));
    checkedItems.set(copy, [].concat(checkedItems.get(this)));
    checkedItemsBackUp.set(copy, [].concat(checkedItemsBackUp.get(this)));

    return copy;
  };

  CheckedHashItem.prototype.makeBackUp = function makeBackUp() {
    checkedItemsBackUp.set(this, [].concat(checkedItems.get(this)));
  };

  CheckedHashItem.prototype.restoreFromBackUp = function restoreFromBackUp() {
    checkedItems.set(this, [].concat(checkedItemsBackUp.get(this)));
  };

  return CheckedHashItem;
}();

export { CheckedHashItem as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2hlY2tlZC1pdGVtcy9jaGVja2VkLWhhc2gtaXRlbS5qcyJdLCJuYW1lcyI6WyJwYXJlbnRzIiwiV2Vha01hcCIsImNoZWNrZWRBbGwiLCJjaGVja2VkSXRlbXNCYWNrVXAiLCJjaGVja2VkSXRlbXMiLCJhZGRDaGlsZHJlbiIsInRoYXQiLCJpdGVtIiwiY2hpbGRyZW4iLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJmb3JFYWNoIiwiY2hpbGQiLCJhZGRDaGVja2VkSXRlbSIsIkNoZWNrZWRIYXNoSXRlbSIsInBybnRzIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsInNldCIsInNsaWNlIiwiZ2V0UGFyZW50cyIsImdldCIsImdldENoZWNrZWRJdGVtcyIsImNoZWNrQWxsIiwiY2xlYXJDaGVja2VkIiwiaW5pdGlhbFBhcmVudCIsInVuZGVmaW5lZCIsInVuY2hlY2tBbGwiLCJpc0NoZWNrZWRBbGwiLCJzcGxpY2UiLCJwdXNoIiwicmVtb3ZlQ2hlY2tlZEl0ZW0iLCJpdGVtcyIsInJlZHVjZVJpZ2h0IiwiYWNjIiwiY3VycmVudEl0ZW0iLCJpbmRleCIsImN1cnJlbnRJdGVtcyIsImlkIiwiY3JlYXRlQ29weSIsImNvcHkiLCJtYWtlQmFja1VwIiwicmVzdG9yZUZyb21CYWNrVXAiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsSUFBTUEsVUFBVSxJQUFJQyxPQUFKLEVBQWhCO0FBQ0EsSUFBTUMsYUFBYSxJQUFJRCxPQUFKLEVBQW5CO0FBQ0EsSUFBTUUscUJBQXFCLElBQUlGLE9BQUosRUFBM0I7QUFDQSxJQUFNRyxlQUFlLElBQUlILE9BQUosRUFBckI7O0FBRUEsU0FBU0ksV0FBVCxDQUFxQkMsSUFBckIsRUFBMkJDLElBQTNCLEVBQWlDO0FBQy9CLE1BQUlBLElBQUosRUFBVTtBQUNSLFFBQUlBLEtBQUtDLFFBQUwsSUFBaUJDLE1BQU1DLE9BQU4sQ0FBY0gsS0FBS0MsUUFBbkIsQ0FBakIsSUFB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LG1CQUFtQm9CLEdBQW5CLENBQXVCLElBQXZCLENBQWpDOztBQUVBLFdBQU9tQixJQUFQO0FBQ0QsRzs7NEJBRURDLFUseUJBQWE7QUFDWHhDLHVCQUFtQmlCLEdBQW5CLENBQXVCLElBQXZCLFlBQWlDaEIsYUFBYW1CLEdBQWIsQ0FBaUIsSUFBakIsQ0FBakM7QUFDRCxHOzs0QkFFRHFCLGlCLGdDQUFvQjtBQUNsQnhDLGlCQUFhZ0IsR0FBYixDQUFpQixJQUFqQixZQUEyQmpCLG1CQUFtQm9CLEdBQW5CLENBQXVCLElBQXZCLENBQTNCO0FBQ0QsRzs7Ozs7U0FyRWtCUixlIiwiZmlsZSI6ImNoZWNrZWQtaGFzaC1pdGVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgYXJyYXktY2FsbGJhY2stcmV0dXJuICovXHJcblxyXG5jb25zdCBwYXJlbnRzID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgY2hlY2tlZEFsbCA9IG5ldyBXZWFrTWFwKCk7XHJcbmNvbnN0IGNoZWNrZWRJdGVtc0JhY2tVcCA9IG5ldyBXZWFrTWFwKCk7XHJcbmNvbnN0IGNoZWNrZWRJdGVtcyA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG5mdW5jdGlvbiBhZGRDaGlsZHJlbih0aGF0LCBpdGVtKSB7XHJcbiAgaWYgKGl0ZW0pIHtcclxuICAgIGlmIChpdGVtLmNoaWxkcmVuICYmIEFycmF5LmlzQXJyYXkoaXRlbS5jaGlsZHJlbikgJiYgaXRlbS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGl0ZW0uY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHsgYWRkQ2hpbGRyZW4odGhhdCwgY2hpbGQpOyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoYXQuYWRkQ2hlY2tlZEl0ZW0oaXRlbSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGVja2VkSGFzaEl0ZW0ge1xyXG4gIGNvbnN0cnVjdG9yKHBybnRzID0gW10pIHtcclxuICAgIHRoaXMudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgIHBhcmVudHMuc2V0KHRoaXMsIHBybnRzLnNsaWNlKCkpO1xyXG4gICAgY2hlY2tlZEFsbC5zZXQodGhpcywgZmFsc2UpO1xyXG4gICAgY2hlY2tlZEl0ZW1zLnNldCh0aGlzLCBbXSk7XHJcbiAgICBjaGVja2VkSXRlbXNCYWNrVXAuc2V0KHRoaXMsIFtdKTtcclxuICB9XHJcblxyXG4gIGdldFBhcmVudHMoKSB7XHJcbiAgICByZXR1cm4gcGFyZW50cy5nZXQodGhpcykuc2xpY2UoKTtcclxuICB9XHJcblxyXG4gIGdldENoZWNrZWRJdGVtcygpIHtcclxuICAgIHJldHVybiBjaGVja2VkSXRlbXMuZ2V0KHRoaXMpLnNsaWNlKCk7XHJcbiAgfVxyXG5cclxuICBjaGVja0FsbCgpIHtcclxuICAgIGNvbnN0IHBybnRzID0gcGFyZW50cy5nZXQodGhpcyk7XHJcbiAgICBjaGVja2VkQWxsLnNldCh0aGlzLCB0cnVlKTtcclxuICAgIHRoaXMuY2xlYXJDaGVja2VkKCk7XHJcbiAgICBjb25zdCBpbml0aWFsUGFyZW50ID0gcHJudHMubGVuZ3RoID4gMCA/IHBybnRzW3BybnRzLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xyXG5cclxuICAgIGlmIChpbml0aWFsUGFyZW50KSBhZGRDaGlsZHJlbih0aGlzLCBpbml0aWFsUGFyZW50KTtcclxuICB9XHJcblxyXG4gIHVuY2hlY2tBbGwoKSB7XHJcbiAgICBjaGVja2VkQWxsLnNldCh0aGlzLCBmYWxzZSk7XHJcbiAgICB0aGlzLmNsZWFyQ2hlY2tlZCgpO1xyXG4gIH1cclxuXHJcbiAgaXNDaGVja2VkQWxsKCkge1xyXG4gICAgcmV0dXJuIGNoZWNrZWRBbGwuZ2V0KHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXJDaGVja2VkKCkge1xyXG4gICAgY2hlY2tlZEl0ZW1zLmdldCh0aGlzKS5zcGxpY2UoMCk7XHJcbiAgfVxyXG5cclxuICBhZGRDaGVja2VkSXRlbShpdGVtKSB7XHJcbiAgICBjaGVja2VkSXRlbXMuZ2V0KHRoaXMpLnB1c2goaXRlbSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVDaGVja2VkSXRlbShpdGVtKSB7XHJcbiAgICBjb25zdCBpdGVtcyA9IGNoZWNrZWRJdGVtcy5nZXQodGhpcyk7XHJcbiAgICBpdGVtcy5yZWR1Y2VSaWdodCgoYWNjLCBjdXJyZW50SXRlbSwgaW5kZXgsIGN1cnJlbnRJdGVtcykgPT4ge1xyXG4gICAgICBpZiAoY3VycmVudEl0ZW0uaWQgPT09IGl0ZW0uaWQpIHtcclxuICAgICAgICBjdXJyZW50SXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgfVxyXG4gICAgfSwgW10pO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlQ29weSgpIHtcclxuICAgIGNvbnN0IGNvcHkgPSBuZXcgQ2hlY2tlZEhhc2hJdGVtKCk7XHJcblxyXG4gICAgcGFyZW50cy5zZXQoY29weSwgWy4uLnBhcmVudHMuZ2V0KHRoaXMpXSk7XHJcbiAgICBjaGVja2VkQWxsLnNldChjb3B5LCBjaGVja2VkQWxsLmdldCh0aGlzKSk7XHJcbiAgICBjaGVja2VkSXRlbXMuc2V0KGNvcHksIFsuLi5jaGVja2VkSXRlbXMuZ2V0KHRoaXMpXSk7XHJcbiAgICBjaGVja2VkSXRlbXNCYWNrVXAuc2V0KGNvcHksIFsuLi5jaGVja2VkSXRlbXNCYWNrVXAuZ2V0KHRoaXMpXSk7XHJcblxyXG4gICAgcmV0dXJuIGNvcHk7XHJcbiAgfVxyXG5cclxuICBtYWtlQmFja1VwKCkge1xyXG4gICAgY2hlY2tlZEl0ZW1zQmFja1VwLnNldCh0aGlzLCBbLi4uY2hlY2tlZEl0ZW1zLmdldCh0aGlzKV0pO1xyXG4gIH1cclxuXHJcbiAgcmVzdG9yZUZyb21CYWNrVXAoKSB7XHJcbiAgICBjaGVja2VkSXRlbXMuc2V0KHRoaXMsIFsuLi5jaGVja2VkSXRlbXNCYWNrVXAuZ2V0KHRoaXMpXSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==