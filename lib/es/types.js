import { element, shape, string, number, bool, arrayOf, oneOfType, func } from 'prop-types';

import { dataSourceProviderType } from './services/types';

var hierarchyItemShape = shape({
  id: number.isRequired,
  name: string.isRequired
});

hierarchyItemShape.children = arrayOf(hierarchyItemShape);

var hierarchyItemListShape = arrayOf(hierarchyItemShape);

var selectedItemsShape = shape({
  name: string.isRequired,
  items: hierarchyItemListShape
});

var foundItemsShape = arrayOf(selectedItemsShape);

var preCheckedItemsShape = shape({
  id: oneOfType([number, string]).isRequired,
  parentId: oneOfType([number, string]),
  isCheckedAll: bool
});

var preCheckedItemsListShape = arrayOf(preCheckedItemsShape);

var popoverOptionsType = shape({
  btnOpenViewLabel: oneOfType([string, element]),
  searchPlaceHolder: string,
  pinnedGroupLabel: oneOfType([string, element]),
  recentGroupLabel: oneOfType([string, element])
});

var tabOptionsType = shape({
  title: oneOfType([string, element]).isRequired,
  dataSourceProvider: dataSourceProviderType.isRequired
});

var viewOptionsType = shape({
  allLabel: oneOfType([string, element]),
  btnSelectLabel: oneOfType([string, element]),
  btnCancelLabel: oneOfType([string, element]),
  groupNameLabel: oneOfType([string, element]),
  groupNamePlaceHolder: string,
  listItemRenderFunction: func,
  searchPlaceHolder: oneOfType([string, element]),
  selectedItemListLabel: oneOfType([string, element]),
  selectedItemRenderFunction: func,
  showInModal: bool,
  title: oneOfType([string, element]).isRequired
});

export { popoverOptionsType, viewOptionsType, hierarchyItemShape, hierarchyItemListShape, selectedItemsShape, foundItemsShape, tabOptionsType, preCheckedItemsShape, preCheckedItemsListShape };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy5qcyJdLCJuYW1lcyI6WyJlbGVtZW50Iiwic2hhcGUiLCJzdHJpbmciLCJudW1iZXIiLCJib29sIiwiYXJyYXlPZiIsIm9uZU9mVHlwZSIsImZ1bmMiLCJkYXRhU291cmNlUHJvdmlkZXJUeXBlIiwiaGllcmFyY2h5SXRlbVNoYXBlIiwiaWQiLCJpc1JlcXVpcmVkIiwibmFtZSIsImNoaWxkcmVuIiwiaGllcmFyY2h5SXRlbUxpc3RTaGFwZSIsInNlbGVjdGVkSXRlbXNTaGFwZSIsIml0ZW1zIiwiZm91bmRJdGVtc1NoYXBlIiwicHJlQ2hlY2tlZEl0ZW1zU2hhcGUiLCJwYXJlbnRJZCIsImlzQ2hlY2tlZEFsbCIsInByZUNoZWNrZWRJdGVtc0xpc3RTaGFwZSIsInBvcG92ZXJPcHRpb25zVHlwZSIsImJ0bk9wZW5WaWV3TGFiZWwiLCJzZWFyY2hQbGFjZUhvbGRlciIsInBpbm5lZEdyb3VwTGFiZWwiLCJyZWNlbnRHcm91cExhYmVsIiwidGFiT3B0aW9uc1R5cGUiLCJ0aXRsZSIsImRhdGFTb3VyY2VQcm92aWRlciIsInZpZXdPcHRpb25zVHlwZSIsImFsbExhYmVsIiwiYnRuU2VsZWN0TGFiZWwiLCJidG5DYW5jZWxMYWJlbCIsImdyb3VwTmFtZUxhYmVsIiwiZ3JvdXBOYW1lUGxhY2VIb2xkZXIiLCJsaXN0SXRlbVJlbmRlckZ1bmN0aW9uIiwic2VsZWN0ZWRJdGVtTGlzdExhYmVsIiwic2VsZWN0ZWRJdGVtUmVuZGVyRnVuY3Rpb24iLCJzaG93SW5Nb2RhbCJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsT0FBVCxFQUFrQkMsS0FBbEIsRUFBeUJDLE1BQXpCLEVBQWlDQyxNQUFqQyxFQUF5Q0MsSUFBekMsRUFBK0NDLE9BQS9DLEVBQXdEQyxTQUF4RCxFQUFtRUMsSUFBbkUsUUFBK0UsWUFBL0U7O0FBRUEsU0FBU0Msc0JBQVQsUUFBdUMsa0JBQXZDOztBQUVBLElBQU1DLHFCQUFxQlIsTUFBTTtBQUMvQlMsTUFBSVAsT0FBT1EsVUFEb0I7QUFFL0JDLFFBQU1WLE9BQU9TO0FBRmtCLENBQU4sQ0FBM0I7O0FBS0FGLG1CQUFtQkksUUFBbkIsR0FBOEJSLFFBQVFJLGtCQUFSLENBQTlCOztBQUVBLElBQU1LLHlCQUF5QlQsUUFBUUksa0JBQVIsQ0FBL0I7O0FBRUEsSUFBTU0scUJBQXFCZCxNQUFNO0FBQy9CVyxRQUFNVixPQUFPUyxVQURrQjtBQUUvQkssU0FBT0Y7QUFGd0IsQ0FBTixDQUEzQjs7QUFLQSxJQUFNRyxrQkFBa0JaLFFBQVFVLGtCQUFSLENBQXhCOztBQUVBLElBQU1HLHVCQUF1QmpCLE1BQU07QUFDakNTLE1BQUlKLFVBQVUsQ0FBQ0gsTUFBRCxFQUFTRCxNQUFULENBQVYsRUFBNEJTLFVBREM7QUFFakNRLFlBQVViLFVBQVUsQ0FBQ0gsTUFBRCxFQUFTRCxNQUFULENBQVYsQ0FGdUI7QUFHakNrQixnQkFBY2hCO0FBSG1CLENBQU4sQ0FBN0I7O0FBTUEsSUFBTWlCLDJCQUEyQmhCLFFBQVFhLG9CQUFSLENBQWpDOztBQUVBLElBQU1JLHFCQUFxQnJCLE1BQU07QUFDL0JzQixvQkFBa0JqQixVQUFVLENBQUNKLE1BQUQsRUFBU0YsT0FBVCxDQUFWLENBRGE7QUFFL0J3QixxQkFBbUJ0QixNQUZZO0FBRy9CdUIsb0JBQWtCbkIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixDQUhhO0FBSS9CMEIsb0JBQWtCcEIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVjtBQUphLENBQU4sQ0FBM0I7O0FBT0EsSUFBTTJCLGlCQUFpQjFCLE1BQU07QUFDM0IyQixTQUFPdEIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixFQUE2QlcsVUFEVDtBQUUzQmtCLHNCQUFvQnJCLHVCQUF1Qkc7QUFGaEIsQ0FBTixDQUF2Qjs7QUFLQSxJQUFNbUIsa0JBQWtCN0IsTUFBTTtBQUM1QjhCLFlBQVV6QixVQUFVLENBQUNKLE1BQUQsRUFBU0YsT0FBVCxDQUFWLENBRGtCO0FBRTVCZ0Msa0JBQWdCMUIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixDQUZZO0FBRzVCaUMsa0JBQWdCM0IsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixDQUhZO0FBSTVCa0Msa0JBQWdCNUIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixDQUpZO0FBSzVCbUMsd0JBQXNCakMsTUFMTTtBQU01QmtDLDBCQUF3QjdCLElBTkk7QUFPNUJpQixxQkFBbUJsQixVQUFVLENBQUNKLE1BQUQsRUFBU0YsT0FBVCxDQUFWLENBUFM7QUFRNUJxQyx5QkFBdUIvQixVQUFVLENBQUNKLE1BQUQsRUFBU0YsT0FBVCxDQUFWLENBUks7QUFTNUJzQyw4QkFBNEIvQixJQVRBO0FBVTVCZ0MsZUFBYW5DLElBVmU7QUFXNUJ3QixTQUFPdEIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixFQUE2Qlc7QUFYUixDQUFOLENBQXhCOztBQWNBLFNBQ0VXLGtCQURGLEVBRUVRLGVBRkYsRUFHRXJCLGtCQUhGLEVBSUVLLHNCQUpGLEVBS0VDLGtCQUxGLEVBTUVFLGVBTkYsRUFPRVUsY0FQRixFQVFFVCxvQkFSRixFQVNFRyx3QkFURiIsImZpbGUiOiJ0eXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVsZW1lbnQsIHNoYXBlLCBzdHJpbmcsIG51bWJlciwgYm9vbCwgYXJyYXlPZiwgb25lT2ZUeXBlLCBmdW5jIH0gZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IGRhdGFTb3VyY2VQcm92aWRlclR5cGUgfSBmcm9tICcuL3NlcnZpY2VzL3R5cGVzJztcblxuY29uc3QgaGllcmFyY2h5SXRlbVNoYXBlID0gc2hhcGUoe1xuICBpZDogbnVtYmVyLmlzUmVxdWlyZWQsXG4gIG5hbWU6IHN0cmluZy5pc1JlcXVpcmVkLFxufSk7XG5cbmhpZXJhcmNoeUl0ZW1TaGFwZS5jaGlsZHJlbiA9IGFycmF5T2YoaGllcmFyY2h5SXRlbVNoYXBlKTtcblxuY29uc3QgaGllcmFyY2h5SXRlbUxpc3RTaGFwZSA9IGFycmF5T2YoaGllcmFyY2h5SXRlbVNoYXBlKTtcblxuY29uc3Qgc2VsZWN0ZWRJdGVtc1NoYXBlID0gc2hhcGUoe1xuICBuYW1lOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgaXRlbXM6IGhpZXJhcmNoeUl0ZW1MaXN0U2hhcGUsXG59KTtcblxuY29uc3QgZm91bmRJdGVtc1NoYXBlID0gYXJyYXlPZihzZWxlY3RlZEl0ZW1zU2hhcGUpO1xuXG5jb25zdCBwcmVDaGVja2VkSXRlbXNTaGFwZSA9IHNoYXBlKHtcbiAgaWQ6IG9uZU9mVHlwZShbbnVtYmVyLCBzdHJpbmddKS5pc1JlcXVpcmVkLFxuICBwYXJlbnRJZDogb25lT2ZUeXBlKFtudW1iZXIsIHN0cmluZ10pLFxuICBpc0NoZWNrZWRBbGw6IGJvb2wsXG59KTtcblxuY29uc3QgcHJlQ2hlY2tlZEl0ZW1zTGlzdFNoYXBlID0gYXJyYXlPZihwcmVDaGVja2VkSXRlbXNTaGFwZSk7XG5cbmNvbnN0IHBvcG92ZXJPcHRpb25zVHlwZSA9IHNoYXBlKHtcbiAgYnRuT3BlblZpZXdMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgc2VhcmNoUGxhY2VIb2xkZXI6IHN0cmluZyxcbiAgcGlubmVkR3JvdXBMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgcmVjZW50R3JvdXBMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbn0pO1xuXG5jb25zdCB0YWJPcHRpb25zVHlwZSA9IHNoYXBlKHtcbiAgdGl0bGU6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSkuaXNSZXF1aXJlZCxcbiAgZGF0YVNvdXJjZVByb3ZpZGVyOiBkYXRhU291cmNlUHJvdmlkZXJUeXBlLmlzUmVxdWlyZWQsXG59KTtcblxuY29uc3Qgdmlld09wdGlvbnNUeXBlID0gc2hhcGUoe1xuICBhbGxMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgYnRuU2VsZWN0TGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXG4gIGJ0bkNhbmNlbExhYmVsOiBvbmVPZlR5cGUoW3N0cmluZywgZWxlbWVudF0pLFxuICBncm91cE5hbWVMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgZ3JvdXBOYW1lUGxhY2VIb2xkZXI6IHN0cmluZyxcbiAgbGlzdEl0ZW1SZW5kZXJGdW5jdGlvbjogZnVuYyxcbiAgc2VhcmNoUGxhY2VIb2xkZXI6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXG4gIHNlbGVjdGVkSXRlbUxpc3RMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgc2VsZWN0ZWRJdGVtUmVuZGVyRnVuY3Rpb246IGZ1bmMsXG4gIHNob3dJbk1vZGFsOiBib29sLFxuICB0aXRsZTogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKS5pc1JlcXVpcmVkLFxufSk7XG5cbmV4cG9ydCB7XG4gIHBvcG92ZXJPcHRpb25zVHlwZSxcbiAgdmlld09wdGlvbnNUeXBlLFxuICBoaWVyYXJjaHlJdGVtU2hhcGUsXG4gIGhpZXJhcmNoeUl0ZW1MaXN0U2hhcGUsXG4gIHNlbGVjdGVkSXRlbXNTaGFwZSxcbiAgZm91bmRJdGVtc1NoYXBlLFxuICB0YWJPcHRpb25zVHlwZSxcbiAgcHJlQ2hlY2tlZEl0ZW1zU2hhcGUsXG4gIHByZUNoZWNrZWRJdGVtc0xpc3RTaGFwZSxcbn07XG5cbiJdfQ==