import { element, shape, string, number, bool, arrayOf, oneOfType, func } from 'prop-types';

import { dataSourceProviderType } from './services/types';

var hierarchyItemShape = shape({
  id: number.isRequired,
  name: string.isRequired
});

hierarchyItemShape.children = arrayOf(hierarchyItemShape);

var hierarchyItemListShape = arrayOf(hierarchyItemShape);

var selectedItemsShape = shape({
  name: string.isRequired,
  items: hierarchyItemListShape
});

var foundItemsShape = arrayOf(selectedItemsShape);

var preCheckedItemsShape = shape({
  id: oneOfType([number, string]).isRequired,
  parentId: oneOfType([number, string]),
  isCheckedAll: bool
});

var preCheckedItemsListShape = arrayOf(preCheckedItemsShape);

var popoverOptionsType = shape({
  btnOpenViewLabel: oneOfType([string, element]),
  foundItemRenderFunction: func,
  searchPlaceHolder: string,
  searchTooltip: oneOfType([string, element]),
  pinnedGroupLabel: oneOfType([string, element]),
  recentGroupLabel: oneOfType([string, element])
});

var tabOptionsType = shape({
  title: oneOfType([string, element]).isRequired,
  dataSourceProvider: dataSourceProviderType.isRequired
});

var viewOptionsType = shape({
  allLabel: oneOfType([string, element]),
  btnSelectLabel: oneOfType([string, element]),
  btnCancelLabel: oneOfType([string, element]),
  groupNameLabel: oneOfType([string, element]),
  groupNamePlaceHolder: string,
  listItemRenderFunction: func,
  searchPlaceHolder: oneOfType([string, element]),
  searchTooltip: oneOfType([string, element]),
  selectedItemListLabel: oneOfType([string, element]),
  selectedItemRenderFunction: func,
  showInModal: bool,
  title: oneOfType([string, element]).isRequired,
  hideGroupNameInput: bool
});

export { popoverOptionsType, viewOptionsType, hierarchyItemShape, hierarchyItemListShape, selectedItemsShape, foundItemsShape, tabOptionsType, preCheckedItemsShape, preCheckedItemsListShape };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy5qcyJdLCJuYW1lcyI6WyJlbGVtZW50Iiwic2hhcGUiLCJzdHJpbmciLCJudW1iZXIiLCJib29sIiwiYXJyYXlPZiIsIm9uZU9mVHlwZSIsImZ1bmMiLCJkYXRhU291cmNlUHJvdmlkZXJUeXBlIiwiaGllcmFyY2h5SXRlbVNoYXBlIiwiaWQiLCJpc1JlcXVpcmVkIiwibmFtZSIsImNoaWxkcmVuIiwiaGllcmFyY2h5SXRlbUxpc3RTaGFwZSIsInNlbGVjdGVkSXRlbXNTaGFwZSIsIml0ZW1zIiwiZm91bmRJdGVtc1NoYXBlIiwicHJlQ2hlY2tlZEl0ZW1zU2hhcGUiLCJwYXJlbnRJZCIsImlzQ2hlY2tlZEFsbCIsInByZUNoZWNrZWRJdGVtc0xpc3RTaGFwZSIsInBvcG92ZXJPcHRpb25zVHlwZSIsImJ0bk9wZW5WaWV3TGFiZWwiLCJmb3VuZEl0ZW1SZW5kZXJGdW5jdGlvbiIsInNlYXJjaFBsYWNlSG9sZGVyIiwic2VhcmNoVG9vbHRpcCIsInBpbm5lZEdyb3VwTGFiZWwiLCJyZWNlbnRHcm91cExhYmVsIiwidGFiT3B0aW9uc1R5cGUiLCJ0aXRsZSIsImRhdGFTb3VyY2VQcm92aWRlciIsInZpZXdPcHRpb25zVHlwZSIsImFsbExhYmVsIiwiYnRuU2VsZWN0TGFiZWwiLCJidG5DYW5jZWxMYWJlbCIsImdyb3VwTmFtZUxhYmVsIiwiZ3JvdXBOYW1lUGxhY2VIb2xkZXIiLCJsaXN0SXRlbVJlbmRlckZ1bmN0aW9uIiwic2VsZWN0ZWRJdGVtTGlzdExhYmVsIiwic2VsZWN0ZWRJdGVtUmVuZGVyRnVuY3Rpb24iLCJzaG93SW5Nb2RhbCIsImhpZGVHcm91cE5hbWVJbnB1dCJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsT0FBVCxFQUFrQkMsS0FBbEIsRUFBeUJDLE1BQXpCLEVBQWlDQyxNQUFqQyxFQUF5Q0MsSUFBekMsRUFBK0NDLE9BQS9DLEVBQXdEQyxTQUF4RCxFQUFtRUMsSUFBbkUsUUFBK0UsWUFBL0U7O0FBRUEsU0FBU0Msc0JBQVQsUUFBdUMsa0JBQXZDOztBQUVBLElBQU1DLHFCQUFxQlIsTUFBTTtBQUMvQlMsTUFBSVAsT0FBT1EsVUFEb0I7QUFFL0JDLFFBQU1WLE9BQU9TO0FBRmtCLENBQU4sQ0FBM0I7O0FBS0FGLG1CQUFtQkksUUFBbkIsR0FBOEJSLFFBQVFJLGtCQUFSLENBQTlCOztBQUVBLElBQU1LLHlCQUF5QlQsUUFBUUksa0JBQVIsQ0FBL0I7O0FBRUEsSUFBTU0scUJBQXFCZCxNQUFNO0FBQy9CVyxRQUFNVixPQUFPUyxVQURrQjtBQUUvQkssU0FBT0Y7QUFGd0IsQ0FBTixDQUEzQjs7QUFLQSxJQUFNRyxrQkFBa0JaLFFBQVFVLGtCQUFSLENBQXhCOztBQUVBLElBQU1HLHVCQUF1QmpCLE1BQU07QUFDakNTLE1BQUlKLFVBQVUsQ0FBQ0gsTUFBRCxFQUFTRCxNQUFULENBQVYsRUFBNEJTLFVBREM7QUFFakNRLFlBQVViLFVBQVUsQ0FBQ0gsTUFBRCxFQUFTRCxNQUFULENBQVYsQ0FGdUI7QUFHakNrQixnQkFBY2hCO0FBSG1CLENBQU4sQ0FBN0I7O0FBTUEsSUFBTWlCLDJCQUEyQmhCLFFBQVFhLG9CQUFSLENBQWpDOztBQUVBLElBQU1JLHFCQUFxQnJCLE1BQU07QUFDL0JzQixvQkFBa0JqQixVQUFVLENBQUNKLE1BQUQsRUFBU0YsT0FBVCxDQUFWLENBRGE7QUFFL0J3QiwyQkFBeUJqQixJQUZNO0FBRy9Ca0IscUJBQW1CdkIsTUFIWTtBQUkvQndCLGlCQUFlcEIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixDQUpnQjtBQUsvQjJCLG9CQUFrQnJCLFVBQVUsQ0FBQ0osTUFBRCxFQUFTRixPQUFULENBQVYsQ0FMYTtBQU0vQjRCLG9CQUFrQnRCLFVBQVUsQ0FBQ0osTUFBRCxFQUFTRixPQUFULENBQVY7QUFOYSxDQUFOLENBQTNCOztBQVNBLElBQU02QixpQkFBaUI1QixNQUFNO0FBQzNCNkIsU0FBT3hCLFVBQVUsQ0FBQ0osTUFBRCxFQUFTRixPQUFULENBQVYsRUFBNkJXLFVBRFQ7QUFFM0JvQixzQkFBb0J2Qix1QkFBdUJHO0FBRmhCLENBQU4sQ0FBdkI7O0FBS0EsSUFBTXFCLGtCQUFrQi9CLE1BQU07QUFDNUJnQyxZQUFVM0IsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixDQURrQjtBQUU1QmtDLGtCQUFnQjVCLFVBQVUsQ0FBQ0osTUFBRCxFQUFTRixPQUFULENBQVYsQ0FGWTtBQUc1Qm1DLGtCQUFnQjdCLFVBQVUsQ0FBQ0osTUFBRCxFQUFTRixPQUFULENBQVYsQ0FIWTtBQUk1Qm9DLGtCQUFnQjlCLFVBQVUsQ0FBQ0osTUFBRCxFQUFTRixPQUFULENBQVYsQ0FKWTtBQUs1QnFDLHdCQUFzQm5DLE1BTE07QUFNNUJvQywwQkFBd0IvQixJQU5JO0FBTzVCa0IscUJBQW1CbkIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixDQVBTO0FBUTVCMEIsaUJBQWVwQixVQUFVLENBQUNKLE1BQUQsRUFBU0YsT0FBVCxDQUFWLENBUmE7QUFTNUJ1Qyx5QkFBdUJqQyxVQUFVLENBQUNKLE1BQUQsRUFBU0YsT0FBVCxDQUFWLENBVEs7QUFVNUJ3Qyw4QkFBNEJqQyxJQVZBO0FBVzVCa0MsZUFBYXJDLElBWGU7QUFZNUIwQixTQUFPeEIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixFQUE2QlcsVUFaUjtBQWE1QitCLHNCQUFvQnRDO0FBYlEsQ0FBTixDQUF4Qjs7QUFnQkEsU0FDRWtCLGtCQURGLEVBRUVVLGVBRkYsRUFHRXZCLGtCQUhGLEVBSUVLLHNCQUpGLEVBS0VDLGtCQUxGLEVBTUVFLGVBTkYsRUFPRVksY0FQRixFQVFFWCxvQkFSRixFQVNFRyx3QkFURiIsImZpbGUiOiJ0eXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVsZW1lbnQsIHNoYXBlLCBzdHJpbmcsIG51bWJlciwgYm9vbCwgYXJyYXlPZiwgb25lT2ZUeXBlLCBmdW5jIH0gZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IGRhdGFTb3VyY2VQcm92aWRlclR5cGUgfSBmcm9tICcuL3NlcnZpY2VzL3R5cGVzJztcblxuY29uc3QgaGllcmFyY2h5SXRlbVNoYXBlID0gc2hhcGUoe1xuICBpZDogbnVtYmVyLmlzUmVxdWlyZWQsXG4gIG5hbWU6IHN0cmluZy5pc1JlcXVpcmVkLFxufSk7XG5cbmhpZXJhcmNoeUl0ZW1TaGFwZS5jaGlsZHJlbiA9IGFycmF5T2YoaGllcmFyY2h5SXRlbVNoYXBlKTtcblxuY29uc3QgaGllcmFyY2h5SXRlbUxpc3RTaGFwZSA9IGFycmF5T2YoaGllcmFyY2h5SXRlbVNoYXBlKTtcblxuY29uc3Qgc2VsZWN0ZWRJdGVtc1NoYXBlID0gc2hhcGUoe1xuICBuYW1lOiBzdHJpbmcuaXNSZXF1aXJlZCxcbiAgaXRlbXM6IGhpZXJhcmNoeUl0ZW1MaXN0U2hhcGUsXG59KTtcblxuY29uc3QgZm91bmRJdGVtc1NoYXBlID0gYXJyYXlPZihzZWxlY3RlZEl0ZW1zU2hhcGUpO1xuXG5jb25zdCBwcmVDaGVja2VkSXRlbXNTaGFwZSA9IHNoYXBlKHtcbiAgaWQ6IG9uZU9mVHlwZShbbnVtYmVyLCBzdHJpbmddKS5pc1JlcXVpcmVkLFxuICBwYXJlbnRJZDogb25lT2ZUeXBlKFtudW1iZXIsIHN0cmluZ10pLFxuICBpc0NoZWNrZWRBbGw6IGJvb2wsXG59KTtcblxuY29uc3QgcHJlQ2hlY2tlZEl0ZW1zTGlzdFNoYXBlID0gYXJyYXlPZihwcmVDaGVja2VkSXRlbXNTaGFwZSk7XG5cbmNvbnN0IHBvcG92ZXJPcHRpb25zVHlwZSA9IHNoYXBlKHtcbiAgYnRuT3BlblZpZXdMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgZm91bmRJdGVtUmVuZGVyRnVuY3Rpb246IGZ1bmMsXG4gIHNlYXJjaFBsYWNlSG9sZGVyOiBzdHJpbmcsXG4gIHNlYXJjaFRvb2x0aXA6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXG4gIHBpbm5lZEdyb3VwTGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXG4gIHJlY2VudEdyb3VwTGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXG59KTtcblxuY29uc3QgdGFiT3B0aW9uc1R5cGUgPSBzaGFwZSh7XG4gIHRpdGxlOiBvbmVPZlR5cGUoW3N0cmluZywgZWxlbWVudF0pLmlzUmVxdWlyZWQsXG4gIGRhdGFTb3VyY2VQcm92aWRlcjogZGF0YVNvdXJjZVByb3ZpZGVyVHlwZS5pc1JlcXVpcmVkLFxufSk7XG5cbmNvbnN0IHZpZXdPcHRpb25zVHlwZSA9IHNoYXBlKHtcbiAgYWxsTGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXG4gIGJ0blNlbGVjdExhYmVsOiBvbmVPZlR5cGUoW3N0cmluZywgZWxlbWVudF0pLFxuICBidG5DYW5jZWxMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgZ3JvdXBOYW1lTGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXG4gIGdyb3VwTmFtZVBsYWNlSG9sZGVyOiBzdHJpbmcsXG4gIGxpc3RJdGVtUmVuZGVyRnVuY3Rpb246IGZ1bmMsXG4gIHNlYXJjaFBsYWNlSG9sZGVyOiBvbmVPZlR5cGUoW3N0cmluZywgZWxlbWVudF0pLFxuICBzZWFyY2hUb29sdGlwOiBvbmVPZlR5cGUoW3N0cmluZywgZWxlbWVudF0pLFxuICBzZWxlY3RlZEl0ZW1MaXN0TGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXG4gIHNlbGVjdGVkSXRlbVJlbmRlckZ1bmN0aW9uOiBmdW5jLFxuICBzaG93SW5Nb2RhbDogYm9vbCxcbiAgdGl0bGU6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSkuaXNSZXF1aXJlZCxcbiAgaGlkZUdyb3VwTmFtZUlucHV0OiBib29sLFxufSk7XG5cbmV4cG9ydCB7XG4gIHBvcG92ZXJPcHRpb25zVHlwZSxcbiAgdmlld09wdGlvbnNUeXBlLFxuICBoaWVyYXJjaHlJdGVtU2hhcGUsXG4gIGhpZXJhcmNoeUl0ZW1MaXN0U2hhcGUsXG4gIHNlbGVjdGVkSXRlbXNTaGFwZSxcbiAgZm91bmRJdGVtc1NoYXBlLFxuICB0YWJPcHRpb25zVHlwZSxcbiAgcHJlQ2hlY2tlZEl0ZW1zU2hhcGUsXG4gIHByZUNoZWNrZWRJdGVtc0xpc3RTaGFwZSxcbn07XG5cbiJdfQ==