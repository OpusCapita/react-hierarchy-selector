import { element, shape, string, number, bool, arrayOf, oneOfType, func } from 'prop-types';

import { dataSourceProviderType } from './services/types';

var hierarchyItemShape = shape({
  id: number.isRequired,
  name: string.isRequired
});

hierarchyItemShape.children = arrayOf(hierarchyItemShape);

var hierarchyItemListShape = arrayOf(hierarchyItemShape);

var selectedItemsShape = shape({
  name: string.isRequired,
  items: hierarchyItemListShape
});

var foundItemsShape = arrayOf(selectedItemsShape);

var preCheckedItemsShape = shape({
  id: oneOfType([number, string]).isRequired,
  parentId: oneOfType([number, string]),
  isCheckedAll: bool
});

var preCheckedItemsListShape = arrayOf(preCheckedItemsShape);

var popoverOptionsType = shape({
  btnOpenViewLabel: oneOfType([string, element]),
  foundItemRenderFunction: func,
  searchPlaceHolder: string,
  pinnedGroupLabel: oneOfType([string, element]),
  recentGroupLabel: oneOfType([string, element])
});

var tabOptionsType = shape({
  title: oneOfType([string, element]).isRequired,
  dataSourceProvider: dataSourceProviderType.isRequired
});

var viewOptionsType = shape({
  allLabel: oneOfType([string, element]),
  btnSelectLabel: oneOfType([string, element]),
  btnCancelLabel: oneOfType([string, element]),
  groupNameLabel: oneOfType([string, element]),
  groupNamePlaceHolder: string,
  listItemRenderFunction: func,
  searchPlaceHolder: oneOfType([string, element]),
  selectedItemListLabel: oneOfType([string, element]),
  selectedItemRenderFunction: func,
  showInModal: bool,
  title: oneOfType([string, element]).isRequired
});

export { popoverOptionsType, viewOptionsType, hierarchyItemShape, hierarchyItemListShape, selectedItemsShape, foundItemsShape, tabOptionsType, preCheckedItemsShape, preCheckedItemsListShape };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy5qcyJdLCJuYW1lcyI6WyJlbGVtZW50Iiwic2hhcGUiLCJzdHJpbmciLCJudW1iZXIiLCJib29sIiwiYXJyYXlPZiIsIm9uZU9mVHlwZSIsImZ1bmMiLCJkYXRhU291cmNlUHJvdmlkZXJUeXBlIiwiaGllcmFyY2h5SXRlbVNoYXBlIiwiaWQiLCJpc1JlcXVpcmVkIiwibmFtZSIsImNoaWxkcmVuIiwiaGllcmFyY2h5SXRlbUxpc3RTaGFwZSIsInNlbGVjdGVkSXRlbXNTaGFwZSIsIml0ZW1zIiwiZm91bmRJdGVtc1NoYXBlIiwicHJlQ2hlY2tlZEl0ZW1zU2hhcGUiLCJwYXJlbnRJZCIsImlzQ2hlY2tlZEFsbCIsInByZUNoZWNrZWRJdGVtc0xpc3RTaGFwZSIsInBvcG92ZXJPcHRpb25zVHlwZSIsImJ0bk9wZW5WaWV3TGFiZWwiLCJmb3VuZEl0ZW1SZW5kZXJGdW5jdGlvbiIsInNlYXJjaFBsYWNlSG9sZGVyIiwicGlubmVkR3JvdXBMYWJlbCIsInJlY2VudEdyb3VwTGFiZWwiLCJ0YWJPcHRpb25zVHlwZSIsInRpdGxlIiwiZGF0YVNvdXJjZVByb3ZpZGVyIiwidmlld09wdGlvbnNUeXBlIiwiYWxsTGFiZWwiLCJidG5TZWxlY3RMYWJlbCIsImJ0bkNhbmNlbExhYmVsIiwiZ3JvdXBOYW1lTGFiZWwiLCJncm91cE5hbWVQbGFjZUhvbGRlciIsImxpc3RJdGVtUmVuZGVyRnVuY3Rpb24iLCJzZWxlY3RlZEl0ZW1MaXN0TGFiZWwiLCJzZWxlY3RlZEl0ZW1SZW5kZXJGdW5jdGlvbiIsInNob3dJbk1vZGFsIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxPQUFULEVBQWtCQyxLQUFsQixFQUF5QkMsTUFBekIsRUFBaUNDLE1BQWpDLEVBQXlDQyxJQUF6QyxFQUErQ0MsT0FBL0MsRUFBd0RDLFNBQXhELEVBQW1FQyxJQUFuRSxRQUErRSxZQUEvRTs7QUFFQSxTQUFTQyxzQkFBVCxRQUF1QyxrQkFBdkM7O0FBRUEsSUFBTUMscUJBQXFCUixNQUFNO0FBQy9CUyxNQUFJUCxPQUFPUSxVQURvQjtBQUUvQkMsUUFBTVYsT0FBT1M7QUFGa0IsQ0FBTixDQUEzQjs7QUFLQUYsbUJBQW1CSSxRQUFuQixHQUE4QlIsUUFBUUksa0JBQVIsQ0FBOUI7O0FBRUEsSUFBTUsseUJBQXlCVCxRQUFRSSxrQkFBUixDQUEvQjs7QUFFQSxJQUFNTSxxQkFBcUJkLE1BQU07QUFDL0JXLFFBQU1WLE9BQU9TLFVBRGtCO0FBRS9CSyxTQUFPRjtBQUZ3QixDQUFOLENBQTNCOztBQUtBLElBQU1HLGtCQUFrQlosUUFBUVUsa0JBQVIsQ0FBeEI7O0FBRUEsSUFBTUcsdUJBQXVCakIsTUFBTTtBQUNqQ1MsTUFBSUosVUFBVSxDQUFDSCxNQUFELEVBQVNELE1BQVQsQ0FBVixFQUE0QlMsVUFEQztBQUVqQ1EsWUFBVWIsVUFBVSxDQUFDSCxNQUFELEVBQVNELE1BQVQsQ0FBVixDQUZ1QjtBQUdqQ2tCLGdCQUFjaEI7QUFIbUIsQ0FBTixDQUE3Qjs7QUFNQSxJQUFNaUIsMkJBQTJCaEIsUUFBUWEsb0JBQVIsQ0FBakM7O0FBRUEsSUFBTUkscUJBQXFCckIsTUFBTTtBQUMvQnNCLG9CQUFrQmpCLFVBQVUsQ0FBQ0osTUFBRCxFQUFTRixPQUFULENBQVYsQ0FEYTtBQUUvQndCLDJCQUF5QmpCLElBRk07QUFHL0JrQixxQkFBbUJ2QixNQUhZO0FBSS9Cd0Isb0JBQWtCcEIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixDQUphO0FBSy9CMkIsb0JBQWtCckIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVjtBQUxhLENBQU4sQ0FBM0I7O0FBUUEsSUFBTTRCLGlCQUFpQjNCLE1BQU07QUFDM0I0QixTQUFPdkIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixFQUE2QlcsVUFEVDtBQUUzQm1CLHNCQUFvQnRCLHVCQUF1Qkc7QUFGaEIsQ0FBTixDQUF2Qjs7QUFLQSxJQUFNb0Isa0JBQWtCOUIsTUFBTTtBQUM1QitCLFlBQVUxQixVQUFVLENBQUNKLE1BQUQsRUFBU0YsT0FBVCxDQUFWLENBRGtCO0FBRTVCaUMsa0JBQWdCM0IsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixDQUZZO0FBRzVCa0Msa0JBQWdCNUIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixDQUhZO0FBSTVCbUMsa0JBQWdCN0IsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixDQUpZO0FBSzVCb0Msd0JBQXNCbEMsTUFMTTtBQU01Qm1DLDBCQUF3QjlCLElBTkk7QUFPNUJrQixxQkFBbUJuQixVQUFVLENBQUNKLE1BQUQsRUFBU0YsT0FBVCxDQUFWLENBUFM7QUFRNUJzQyx5QkFBdUJoQyxVQUFVLENBQUNKLE1BQUQsRUFBU0YsT0FBVCxDQUFWLENBUks7QUFTNUJ1Qyw4QkFBNEJoQyxJQVRBO0FBVTVCaUMsZUFBYXBDLElBVmU7QUFXNUJ5QixTQUFPdkIsVUFBVSxDQUFDSixNQUFELEVBQVNGLE9BQVQsQ0FBVixFQUE2Qlc7QUFYUixDQUFOLENBQXhCOztBQWNBLFNBQ0VXLGtCQURGLEVBRUVTLGVBRkYsRUFHRXRCLGtCQUhGLEVBSUVLLHNCQUpGLEVBS0VDLGtCQUxGLEVBTUVFLGVBTkYsRUFPRVcsY0FQRixFQVFFVixvQkFSRixFQVNFRyx3QkFURiIsImZpbGUiOiJ0eXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVsZW1lbnQsIHNoYXBlLCBzdHJpbmcsIG51bWJlciwgYm9vbCwgYXJyYXlPZiwgb25lT2ZUeXBlLCBmdW5jIH0gZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5pbXBvcnQgeyBkYXRhU291cmNlUHJvdmlkZXJUeXBlIH0gZnJvbSAnLi9zZXJ2aWNlcy90eXBlcyc7XHJcblxyXG5jb25zdCBoaWVyYXJjaHlJdGVtU2hhcGUgPSBzaGFwZSh7XHJcbiAgaWQ6IG51bWJlci5pc1JlcXVpcmVkLFxyXG4gIG5hbWU6IHN0cmluZy5pc1JlcXVpcmVkLFxyXG59KTtcclxuXHJcbmhpZXJhcmNoeUl0ZW1TaGFwZS5jaGlsZHJlbiA9IGFycmF5T2YoaGllcmFyY2h5SXRlbVNoYXBlKTtcclxuXHJcbmNvbnN0IGhpZXJhcmNoeUl0ZW1MaXN0U2hhcGUgPSBhcnJheU9mKGhpZXJhcmNoeUl0ZW1TaGFwZSk7XHJcblxyXG5jb25zdCBzZWxlY3RlZEl0ZW1zU2hhcGUgPSBzaGFwZSh7XHJcbiAgbmFtZTogc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgaXRlbXM6IGhpZXJhcmNoeUl0ZW1MaXN0U2hhcGUsXHJcbn0pO1xyXG5cclxuY29uc3QgZm91bmRJdGVtc1NoYXBlID0gYXJyYXlPZihzZWxlY3RlZEl0ZW1zU2hhcGUpO1xyXG5cclxuY29uc3QgcHJlQ2hlY2tlZEl0ZW1zU2hhcGUgPSBzaGFwZSh7XHJcbiAgaWQ6IG9uZU9mVHlwZShbbnVtYmVyLCBzdHJpbmddKS5pc1JlcXVpcmVkLFxyXG4gIHBhcmVudElkOiBvbmVPZlR5cGUoW251bWJlciwgc3RyaW5nXSksXHJcbiAgaXNDaGVja2VkQWxsOiBib29sLFxyXG59KTtcclxuXHJcbmNvbnN0IHByZUNoZWNrZWRJdGVtc0xpc3RTaGFwZSA9IGFycmF5T2YocHJlQ2hlY2tlZEl0ZW1zU2hhcGUpO1xyXG5cclxuY29uc3QgcG9wb3Zlck9wdGlvbnNUeXBlID0gc2hhcGUoe1xyXG4gIGJ0bk9wZW5WaWV3TGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXHJcbiAgZm91bmRJdGVtUmVuZGVyRnVuY3Rpb246IGZ1bmMsXHJcbiAgc2VhcmNoUGxhY2VIb2xkZXI6IHN0cmluZyxcclxuICBwaW5uZWRHcm91cExhYmVsOiBvbmVPZlR5cGUoW3N0cmluZywgZWxlbWVudF0pLFxyXG4gIHJlY2VudEdyb3VwTGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXHJcbn0pO1xyXG5cclxuY29uc3QgdGFiT3B0aW9uc1R5cGUgPSBzaGFwZSh7XHJcbiAgdGl0bGU6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSkuaXNSZXF1aXJlZCxcclxuICBkYXRhU291cmNlUHJvdmlkZXI6IGRhdGFTb3VyY2VQcm92aWRlclR5cGUuaXNSZXF1aXJlZCxcclxufSk7XHJcblxyXG5jb25zdCB2aWV3T3B0aW9uc1R5cGUgPSBzaGFwZSh7XHJcbiAgYWxsTGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXHJcbiAgYnRuU2VsZWN0TGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXHJcbiAgYnRuQ2FuY2VsTGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXHJcbiAgZ3JvdXBOYW1lTGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXHJcbiAgZ3JvdXBOYW1lUGxhY2VIb2xkZXI6IHN0cmluZyxcclxuICBsaXN0SXRlbVJlbmRlckZ1bmN0aW9uOiBmdW5jLFxyXG4gIHNlYXJjaFBsYWNlSG9sZGVyOiBvbmVPZlR5cGUoW3N0cmluZywgZWxlbWVudF0pLFxyXG4gIHNlbGVjdGVkSXRlbUxpc3RMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcclxuICBzZWxlY3RlZEl0ZW1SZW5kZXJGdW5jdGlvbjogZnVuYyxcclxuICBzaG93SW5Nb2RhbDogYm9vbCxcclxuICB0aXRsZTogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKS5pc1JlcXVpcmVkLFxyXG59KTtcclxuXHJcbmV4cG9ydCB7XHJcbiAgcG9wb3Zlck9wdGlvbnNUeXBlLFxyXG4gIHZpZXdPcHRpb25zVHlwZSxcclxuICBoaWVyYXJjaHlJdGVtU2hhcGUsXHJcbiAgaGllcmFyY2h5SXRlbUxpc3RTaGFwZSxcclxuICBzZWxlY3RlZEl0ZW1zU2hhcGUsXHJcbiAgZm91bmRJdGVtc1NoYXBlLFxyXG4gIHRhYk9wdGlvbnNUeXBlLFxyXG4gIHByZUNoZWNrZWRJdGVtc1NoYXBlLFxyXG4gIHByZUNoZWNrZWRJdGVtc0xpc3RTaGFwZSxcclxufTtcclxuXHJcbiJdfQ==