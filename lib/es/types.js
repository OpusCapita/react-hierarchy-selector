import { element, shape, string, number, bool, arrayOf, oneOfType, func } from 'prop-types';
import { dataSourceProviderType } from './services/types';
var hierarchyItemShape = shape({
  id: number.isRequired,
  name: string.isRequired
});
hierarchyItemShape.children = arrayOf(hierarchyItemShape);
var hierarchyItemListShape = arrayOf(hierarchyItemShape);
var selectedItemsShape = shape({
  name: string.isRequired,
  items: hierarchyItemListShape
});
var foundItemsShape = arrayOf(selectedItemsShape);
var preCheckedItemsShape = shape({
  id: oneOfType([number, string]).isRequired,
  parentId: oneOfType([number, string]),
  isCheckedAll: bool
});
var preCheckedItemsListShape = arrayOf(preCheckedItemsShape);
var popoverOptionsType = shape({
  btnOpenViewLabel: oneOfType([string, element]),
  foundItemRenderFunction: func,
  searchPlaceHolder: string,
  searchTooltip: oneOfType([string, element]),
  pinnedGroupLabel: oneOfType([string, element]),
  recentGroupLabel: oneOfType([string, element])
});
var tabOptionsType = shape({
  title: oneOfType([string, element]).isRequired,
  dataSourceProvider: dataSourceProviderType.isRequired
});
var viewOptionsType = shape({
  allLabel: oneOfType([string, element]),
  btnSelectLabel: oneOfType([string, element]),
  btnCancelLabel: oneOfType([string, element]),
  groupNameLabel: oneOfType([string, element]),
  groupNamePlaceHolder: string,
  listItemRenderFunction: func,
  searchPlaceHolder: oneOfType([string, element]),
  searchTooltip: oneOfType([string, element]),
  selectedItemListLabel: oneOfType([string, element]),
  selectedItemRenderFunction: func,
  showInModal: bool,
  title: oneOfType([string, element]).isRequired,
  hideGroupNameInput: bool
});
export { popoverOptionsType, viewOptionsType, hierarchyItemShape, hierarchyItemListShape, selectedItemsShape, foundItemsShape, tabOptionsType, preCheckedItemsShape, preCheckedItemsListShape };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy5qcyJdLCJuYW1lcyI6WyJlbGVtZW50Iiwic2hhcGUiLCJzdHJpbmciLCJudW1iZXIiLCJib29sIiwiYXJyYXlPZiIsIm9uZU9mVHlwZSIsImZ1bmMiLCJkYXRhU291cmNlUHJvdmlkZXJUeXBlIiwiaGllcmFyY2h5SXRlbVNoYXBlIiwiaWQiLCJpc1JlcXVpcmVkIiwibmFtZSIsImNoaWxkcmVuIiwiaGllcmFyY2h5SXRlbUxpc3RTaGFwZSIsInNlbGVjdGVkSXRlbXNTaGFwZSIsIml0ZW1zIiwiZm91bmRJdGVtc1NoYXBlIiwicHJlQ2hlY2tlZEl0ZW1zU2hhcGUiLCJwYXJlbnRJZCIsImlzQ2hlY2tlZEFsbCIsInByZUNoZWNrZWRJdGVtc0xpc3RTaGFwZSIsInBvcG92ZXJPcHRpb25zVHlwZSIsImJ0bk9wZW5WaWV3TGFiZWwiLCJmb3VuZEl0ZW1SZW5kZXJGdW5jdGlvbiIsInNlYXJjaFBsYWNlSG9sZGVyIiwic2VhcmNoVG9vbHRpcCIsInBpbm5lZEdyb3VwTGFiZWwiLCJyZWNlbnRHcm91cExhYmVsIiwidGFiT3B0aW9uc1R5cGUiLCJ0aXRsZSIsImRhdGFTb3VyY2VQcm92aWRlciIsInZpZXdPcHRpb25zVHlwZSIsImFsbExhYmVsIiwiYnRuU2VsZWN0TGFiZWwiLCJidG5DYW5jZWxMYWJlbCIsImdyb3VwTmFtZUxhYmVsIiwiZ3JvdXBOYW1lUGxhY2VIb2xkZXIiLCJsaXN0SXRlbVJlbmRlckZ1bmN0aW9uIiwic2VsZWN0ZWRJdGVtTGlzdExhYmVsIiwic2VsZWN0ZWRJdGVtUmVuZGVyRnVuY3Rpb24iLCJzaG93SW5Nb2RhbCIsImhpZGVHcm91cE5hbWVJbnB1dCJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsT0FBVCxFQUFrQkMsS0FBbEIsRUFBeUJDLE1BQXpCLEVBQWlDQyxNQUFqQyxFQUF5Q0MsSUFBekMsRUFBK0NDLE9BQS9DLEVBQXdEQyxTQUF4RCxFQUFtRUMsSUFBbkUsUUFBK0UsWUFBL0U7QUFFQSxTQUFT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QUQsRUFBU0YsT0FBVCxDQUFELENBVEo7QUFVNUJ3QyxFQUFBQSwwQkFBMEIsRUFBRWpDLElBVkE7QUFXNUJrQyxFQUFBQSxXQUFXLEVBQUVyQyxJQVhlO0FBWTVCMEIsRUFBQUEsS0FBSyxFQUFFeEIsU0FBUyxDQUFDLENBQUNKLE1BQUQsRUFBU0YsT0FBVCxDQUFELENBQVQsQ0FBNkJXLFVBWlI7QUFhNUIrQixFQUFBQSxrQkFBa0IsRUFBRXRDO0FBYlEsQ0FBRCxDQUE3QjtBQWdCQSxTQUNFa0Isa0JBREYsRUFFRVUsZUFGRixFQUdFdkIsa0JBSEYsRUFJRUssc0JBSkYsRUFLRUMsa0JBTEYsRUFNRUUsZUFORixFQU9FWSxjQVBGLEVBUUVYLG9CQVJGLEVBU0VHLHdCQVRGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZWxlbWVudCwgc2hhcGUsIHN0cmluZywgbnVtYmVyLCBib29sLCBhcnJheU9mLCBvbmVPZlR5cGUsIGZ1bmMgfSBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgZGF0YVNvdXJjZVByb3ZpZGVyVHlwZSB9IGZyb20gJy4vc2VydmljZXMvdHlwZXMnO1xuXG5jb25zdCBoaWVyYXJjaHlJdGVtU2hhcGUgPSBzaGFwZSh7XG4gIGlkOiBudW1iZXIuaXNSZXF1aXJlZCxcbiAgbmFtZTogc3RyaW5nLmlzUmVxdWlyZWQsXG59KTtcblxuaGllcmFyY2h5SXRlbVNoYXBlLmNoaWxkcmVuID0gYXJyYXlPZihoaWVyYXJjaHlJdGVtU2hhcGUpO1xuXG5jb25zdCBoaWVyYXJjaHlJdGVtTGlzdFNoYXBlID0gYXJyYXlPZihoaWVyYXJjaHlJdGVtU2hhcGUpO1xuXG5jb25zdCBzZWxlY3RlZEl0ZW1zU2hhcGUgPSBzaGFwZSh7XG4gIG5hbWU6IHN0cmluZy5pc1JlcXVpcmVkLFxuICBpdGVtczogaGllcmFyY2h5SXRlbUxpc3RTaGFwZSxcbn0pO1xuXG5jb25zdCBmb3VuZEl0ZW1zU2hhcGUgPSBhcnJheU9mKHNlbGVjdGVkSXRlbXNTaGFwZSk7XG5cbmNvbnN0IHByZUNoZWNrZWRJdGVtc1NoYXBlID0gc2hhcGUoe1xuICBpZDogb25lT2ZUeXBlKFtudW1iZXIsIHN0cmluZ10pLmlzUmVxdWlyZWQsXG4gIHBhcmVudElkOiBvbmVPZlR5cGUoW251bWJlciwgc3RyaW5nXSksXG4gIGlzQ2hlY2tlZEFsbDogYm9vbCxcbn0pO1xuXG5jb25zdCBwcmVDaGVja2VkSXRlbXNMaXN0U2hhcGUgPSBhcnJheU9mKHByZUNoZWNrZWRJdGVtc1NoYXBlKTtcblxuY29uc3QgcG9wb3Zlck9wdGlvbnNUeXBlID0gc2hhcGUoe1xuICBidG5PcGVuVmlld0xhYmVsOiBvbmVPZlR5cGUoW3N0cmluZywgZWxlbWVudF0pLFxuICBmb3VuZEl0ZW1SZW5kZXJGdW5jdGlvbjogZnVuYyxcbiAgc2VhcmNoUGxhY2VIb2xkZXI6IHN0cmluZyxcbiAgc2VhcmNoVG9vbHRpcDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgcGlubmVkR3JvdXBMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgcmVjZW50R3JvdXBMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbn0pO1xuXG5jb25zdCB0YWJPcHRpb25zVHlwZSA9IHNoYXBlKHtcbiAgdGl0bGU6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSkuaXNSZXF1aXJlZCxcbiAgZGF0YVNvdXJjZVByb3ZpZGVyOiBkYXRhU291cmNlUHJvdmlkZXJUeXBlLmlzUmVxdWlyZWQsXG59KTtcblxuY29uc3Qgdmlld09wdGlvbnNUeXBlID0gc2hhcGUoe1xuICBhbGxMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgYnRuU2VsZWN0TGFiZWw6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXG4gIGJ0bkNhbmNlbExhYmVsOiBvbmVPZlR5cGUoW3N0cmluZywgZWxlbWVudF0pLFxuICBncm91cE5hbWVMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgZ3JvdXBOYW1lUGxhY2VIb2xkZXI6IHN0cmluZyxcbiAgbGlzdEl0ZW1SZW5kZXJGdW5jdGlvbjogZnVuYyxcbiAgc2VhcmNoUGxhY2VIb2xkZXI6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXG4gIHNlYXJjaFRvb2x0aXA6IG9uZU9mVHlwZShbc3RyaW5nLCBlbGVtZW50XSksXG4gIHNlbGVjdGVkSXRlbUxpc3RMYWJlbDogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKSxcbiAgc2VsZWN0ZWRJdGVtUmVuZGVyRnVuY3Rpb246IGZ1bmMsXG4gIHNob3dJbk1vZGFsOiBib29sLFxuICB0aXRsZTogb25lT2ZUeXBlKFtzdHJpbmcsIGVsZW1lbnRdKS5pc1JlcXVpcmVkLFxuICBoaWRlR3JvdXBOYW1lSW5wdXQ6IGJvb2wsXG59KTtcblxuZXhwb3J0IHtcbiAgcG9wb3Zlck9wdGlvbnNUeXBlLFxuICB2aWV3T3B0aW9uc1R5cGUsXG4gIGhpZXJhcmNoeUl0ZW1TaGFwZSxcbiAgaGllcmFyY2h5SXRlbUxpc3RTaGFwZSxcbiAgc2VsZWN0ZWRJdGVtc1NoYXBlLFxuICBmb3VuZEl0ZW1zU2hhcGUsXG4gIHRhYk9wdGlvbnNUeXBlLFxuICBwcmVDaGVja2VkSXRlbXNTaGFwZSxcbiAgcHJlQ2hlY2tlZEl0ZW1zTGlzdFNoYXBlLFxufTtcblxuIl19