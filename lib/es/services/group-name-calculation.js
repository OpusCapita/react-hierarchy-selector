var SOME_GROUP_NAME = 'Default group';

export default function calculateGroupName(groupName, changedByUser, checkedHashLists) {
  if (changedByUser) return groupName;

  var hashListKeys = Object.keys(checkedHashLists);
  /* No one hashList */
  if (hashListKeys.length === 0) return '';
  /* More then one hash list from different data sources */
  if (hashListKeys.length > 1) return SOME_GROUP_NAME;
  /* Initializing variables */
  var names = [];
  var checkedHash = checkedHashLists[hashListKeys[0]].get();
  var maxParentLength = 0;
  var i = 0;
  var j = 0;
  /* Starting looking for parents */
  var allParents = Object.keys(checkedHash).map(function (key) {
    var parentArray = checkedHash[key].getParents();
    if (parentArray.length > maxParentLength) maxParentLength = parentArray.length;

    return parentArray;
  });
  /* Iteration over all parent sets */
  while (i < maxParentLength) {
    var foundParent = null;
    var moreThanOneParent = false;
    for (j = 0; j < allParents.length; j += 1) {
      var el = allParents[j][i];
      if (el && el !== foundParent) {
        moreThanOneParent = foundParent !== null;
        if (moreThanOneParent) break;else foundParent = el;
      }
    }
    if (moreThanOneParent) break;else names.push(foundParent.name);

    i += 1;
  }
  if (names.length === 0) names.push(SOME_GROUP_NAME);

  return names.join(' / ');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9ncm91cC1uYW1lLWNhbGN1bGF0aW9uLmpzIl0sIm5hbWVzIjpbIlNPTUVfR1JPVVBfTkFNRSIsImNhbGN1bGF0ZUdyb3VwTmFtZSIsImdyb3VwTmFtZSIsImNoYW5nZWRCeVVzZXIiLCJjaGVja2VkSGFzaExpc3RzIiwiaGFzaExpc3RLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsIm5hbWVzIiwiY2hlY2tlZEhhc2giLCJnZXQiLCJtYXhQYXJlbnRMZW5ndGgiLCJpIiwiaiIsImFsbFBhcmVudHMiLCJtYXAiLCJrZXkiLCJwYXJlbnRBcnJheSIsImdldFBhcmVudHMiLCJmb3VuZFBhcmVudCIsIm1vcmVUaGFuT25lUGFyZW50IiwiZWwiLCJwdXNoIiwibmFtZSIsImpvaW4iXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLGtCQUFrQixlQUF4Qjs7QUFFQSxlQUFlLFNBQVNDLGtCQUFULENBQTRCQyxTQUE1QixFQUF1Q0MsYUFBdkMsRUFBc0RDLGdCQUF0RCxFQUF3RTtBQUNyRixNQUFJRCxhQUFKLEVBQW1CLE9BQU9ELFNBQVA7O0FBRW5CLE1BQU1HLGVBQWVDLE9BQU9DLElBQVAsQ0FBWUgsZ0JBQVosQ0FBckI7QUFDQTtBQUNBLE1BQUlDLGFBQWFHLE1BQWIsS0FBd0IsQ0FBNUIsRUFBK0IsT0FBTyxFQUFQO0FBQy9CO0FBQ0EsTUFBSUgsYUFBYUcsTUFBYixHQUFzQixDQUExQixFQUE2QixPQUFPUixlQUFQO0FBQzdCO0FBQ0EsTUFBTVMsUUFBUSxFQUFkO0FBQ0EsTUFBTUMsY0FBY04saUJBQWlCQyxhQUFhLENBQWIsQ0FBakIsRUFBa0NNLEdBQWxDLEVBQXBCO0FBQ0EsTUFBSUMsa0JBQWtCLENBQXRCO0FBQ0EsTUFBSUMsSUFBSSxDQUFSO0FBQ0EsTUFBSUMsSUFBSSxDQUFSO0FBQ0E7QUFDQSxNQUFNQyxhQUFhVCxPQUFPQyxJQUFQLENBQVlHLFdBQVosRUFBeUJNLEdBQXpCLENBQTZCLFVBQUNDLEdBQUQsRUFBUztBQUN2RCxRQUFNQyxjQUFjUixZQUFZTyxHQUFaLEVBQWlCRSxVQUFqQixFQUFwQjtBQUNBLFFBQUlELFlBQVlWLE1BQVosR0FBcUJJLGVBQXpCLEVBQTBDQSxrQkFBa0JNLFlBQVlWLE1BQTlCOztBQUUxQyxXQUFPVSxXQUFQO0FBQ0QsR0FMa0IsQ0FBbkI7QUFNQTtBQUNBLFNBQU9MLElBQUlELGVBQVgsRUFBNEI7QUFDMUIsUUFBSVEsY0FBYyxJQUFsQjtBQUNBLFFBQUlDLG9CQUFvQixLQUF4QjtBQUNBLFNBQUtQLElBQUksQ0FBVCxFQUFZQSxJQUFJQyxXQUFXUCxNQUEzQixFQUFtQ00sS0FBSyxDQUF4QyxFQUEyQztBQUN6QyxVQUFNUSxLQUFLUCxXQUFXRCxDQUFYLEVBQWNELENBQWQsQ0FBWDtBQUNBLFVBQUlTLE1BQU1BLE9BQU9GLFdBQWpCLEVBQThCO0FBQzVCQyw0QkFBb0JELGdCQUFnQixJQUFwQztBQUNBLFlBQUlDLGlCQUFKLEVBQXVCLE1BQXZCLEtBQ0tELGNBQWNFLEVBQWQ7QUFDTjtBQUNGO0FBQ0QsUUFBSUQsaUJBQUosRUFBdUIsTUFBdkIsS0FDS1osTUFBTWMsSUFBTixDQUFXSCxZQUFZSSxJQUF2Qjs7QUFFTFgsU0FBSyxDQUFMO0FBQ0Q7QUFDRCxNQUFJSixNQUFNRCxNQUFOLEtBQWlCLENBQXJCLEVBQXdCQyxNQUFNYyxJQUFOLENBQVd2QixlQUFYOztBQUV4QixTQUFPUyxNQUFNZ0IsSUFBTixDQUFXLEtBQVgsQ0FBUDtBQUNEIiwiZmlsZSI6Imdyb3VwLW5hbWUtY2FsY3VsYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTT01FX0dST1VQX05BTUUgPSAnRGVmYXVsdCBncm91cCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxjdWxhdGVHcm91cE5hbWUoZ3JvdXBOYW1lLCBjaGFuZ2VkQnlVc2VyLCBjaGVja2VkSGFzaExpc3RzKSB7XHJcbiAgaWYgKGNoYW5nZWRCeVVzZXIpIHJldHVybiBncm91cE5hbWU7XHJcblxyXG4gIGNvbnN0IGhhc2hMaXN0S2V5cyA9IE9iamVjdC5rZXlzKGNoZWNrZWRIYXNoTGlzdHMpO1xyXG4gIC8qIE5vIG9uZSBoYXNoTGlzdCAqL1xyXG4gIGlmIChoYXNoTGlzdEtleXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XHJcbiAgLyogTW9yZSB0aGVuIG9uZSBoYXNoIGxpc3QgZnJvbSBkaWZmZXJlbnQgZGF0YSBzb3VyY2VzICovXHJcbiAgaWYgKGhhc2hMaXN0S2V5cy5sZW5ndGggPiAxKSByZXR1cm4gU09NRV9HUk9VUF9OQU1FO1xyXG4gIC8qIEluaXRpYWxpemluZyB2YXJpYWJsZXMgKi9cclxuICBjb25zdCBuYW1lcyA9IFtdO1xyXG4gIGNvbnN0IGNoZWNrZWRIYXNoID0gY2hlY2tlZEhhc2hMaXN0c1toYXNoTGlzdEtleXNbMF1dLmdldCgpO1xyXG4gIGxldCBtYXhQYXJlbnRMZW5ndGggPSAwO1xyXG4gIGxldCBpID0gMDtcclxuICBsZXQgaiA9IDA7XHJcbiAgLyogU3RhcnRpbmcgbG9va2luZyBmb3IgcGFyZW50cyAqL1xyXG4gIGNvbnN0IGFsbFBhcmVudHMgPSBPYmplY3Qua2V5cyhjaGVja2VkSGFzaCkubWFwKChrZXkpID0+IHtcclxuICAgIGNvbnN0IHBhcmVudEFycmF5ID0gY2hlY2tlZEhhc2hba2V5XS5nZXRQYXJlbnRzKCk7XHJcbiAgICBpZiAocGFyZW50QXJyYXkubGVuZ3RoID4gbWF4UGFyZW50TGVuZ3RoKSBtYXhQYXJlbnRMZW5ndGggPSBwYXJlbnRBcnJheS5sZW5ndGg7XHJcblxyXG4gICAgcmV0dXJuIHBhcmVudEFycmF5O1xyXG4gIH0pO1xyXG4gIC8qIEl0ZXJhdGlvbiBvdmVyIGFsbCBwYXJlbnQgc2V0cyAqL1xyXG4gIHdoaWxlIChpIDwgbWF4UGFyZW50TGVuZ3RoKSB7XHJcbiAgICBsZXQgZm91bmRQYXJlbnQgPSBudWxsO1xyXG4gICAgbGV0IG1vcmVUaGFuT25lUGFyZW50ID0gZmFsc2U7XHJcbiAgICBmb3IgKGogPSAwOyBqIDwgYWxsUGFyZW50cy5sZW5ndGg7IGogKz0gMSkge1xyXG4gICAgICBjb25zdCBlbCA9IGFsbFBhcmVudHNbal1baV07XHJcbiAgICAgIGlmIChlbCAmJiBlbCAhPT0gZm91bmRQYXJlbnQpIHtcclxuICAgICAgICBtb3JlVGhhbk9uZVBhcmVudCA9IGZvdW5kUGFyZW50ICE9PSBudWxsO1xyXG4gICAgICAgIGlmIChtb3JlVGhhbk9uZVBhcmVudCkgYnJlYWs7XHJcbiAgICAgICAgZWxzZSBmb3VuZFBhcmVudCA9IGVsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobW9yZVRoYW5PbmVQYXJlbnQpIGJyZWFrO1xyXG4gICAgZWxzZSBuYW1lcy5wdXNoKGZvdW5kUGFyZW50Lm5hbWUpO1xyXG5cclxuICAgIGkgKz0gMTtcclxuICB9XHJcbiAgaWYgKG5hbWVzLmxlbmd0aCA9PT0gMCkgbmFtZXMucHVzaChTT01FX0dST1VQX05BTUUpO1xyXG5cclxuICByZXR1cm4gbmFtZXMuam9pbignIC8gJyk7XHJcbn1cclxuIl19