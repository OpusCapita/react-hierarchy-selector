function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/no-unused-prop-types */
import React from 'react';
import PropTypes from 'prop-types';
import SearchBar from '@opuscapita/react-searchbar';
import Spinner from '../spinner';
import { dataSourceProviderType } from '../../services/types';
import ColumnList from '../../models/column/column-list';
import ViewColumn from './column/column.component';

var ViewTabContent =
/*#__PURE__*/
function (_React$PureComponent) {
  _inheritsLoose(ViewTabContent, _React$PureComponent);

  function ViewTabContent(_props) {
    var _this;

    _this = _React$PureComponent.call(this, _props) || this;

    _defineProperty(_assertThisInitialized(_this), "getIdOfFirstItem", function (props) {
      var dataSourceProvider = props.dataSourceProvider;
      var firstItem = dataSourceProvider.getFirstItem();
      if (firstItem === null || !firstItem.id) return null;
      return firstItem.id;
    });

    _defineProperty(_assertThisInitialized(_this), "getContent", function () {
      _this.refreshContent();

      var list = _this.columns.list || [];
      var selectedPath = _this.columns.selectedPath || [];
      var parentIds = [];
      var anyCheckedAll = false;
      return React.createElement("div", {
        className: "oc-hierarchy-selector-tab-content"
      }, React.createElement("div", {
        className: "oc-hierarchy-selector-tab-search-bar"
      }, React.createElement(SearchBar, {
        defaltValue: _this.state.searchingFor,
        isDynamic: true,
        isTooltipEnabled: !!_this.props.searchTooltip,
        minChars: 2,
        translations: {
          tooltip: _this.props.searchTooltip,
          searchPlaceHolder: _this.props.searchPlaceHolder
        },
        onSearch: _this.searchChangeHandler,
        onClear: _this.searchClearHandler
      })), React.createElement("div", {
        className: "oc-hierarchy-selector-column-wrapper"
      }, Object.keys(list).map(function (key) {
        var data = list[key];
        var selectedId = selectedPath[key] ? String(selectedPath[key]) : null;
        var parentReferenceIds = parentIds.slice();

        var isCheckedAll = _this.getIsCheckedAll(parentIds);

        var checkedIds = isCheckedAll ? [] : _this.getCheckedIds(parentIds, data);
        anyCheckedAll = anyCheckedAll || isCheckedAll;
        parentIds.push(selectedId);
        return React.createElement(ViewColumn, {
          allLabel: _this.props.allLabel,
          checkedAll: anyCheckedAll || isCheckedAll,
          checkedAllDisabled: anyCheckedAll && !isCheckedAll,
          checkedAllHidden: Number(key) === 0,
          checkedIds: checkedIds,
          data: data,
          index: Number(key) + 1,
          itemRenderFunction: _this.props.listItemRenderFunction,
          key: Number(key) + 1,
          referenceIds: parentReferenceIds,
          selectedId: selectedId,
          onCheck: _this.checkHandler,
          onCheckAll: _this.checkAllHandler,
          onClick: _this.clickHandler
        });
      })));
    });

    _defineProperty(_assertThisInitialized(_this), "getSpinner", function () {
      return React.createElement("div", {
        className: "oc-hierarchy-selector-tab-content"
      }, React.createElement(Spinner, null));
    });

    _defineProperty(_assertThisInitialized(_this), "clickHandler", function (level, id) {
      _this.setState({
        selectedColumn: level,
        selectedId: id
      });
    });

    _defineProperty(_assertThisInitialized(_this), "checkHandler", function (referenceIds, id, checkState) {
      var checkedItemHashList = _this.props.dataSourceProvider.getChecked();

      if (checkState) {
        checkedItemHashList.add(referenceIds, id);
      } else {
        checkedItemHashList.remove(referenceIds, id);
      }

      _this.setState({
        checkedItemsLastUpdate: checkedItemHashList.getLastUpdateStamp()
      });

      _this.props.onCheckListChange(checkedItemHashList);
    });

    _defineProperty(_assertThisInitialized(_this), "checkAllHandler", function (referenceIds, checkState) {
      var parentIds = referenceIds.slice();
      var id = parentIds.pop();
      if (!id) throw new Error('There is no selected parent element to perform checking of all elements');

      var checkedItemHashList = _this.props.dataSourceProvider.getChecked();

      if (checkState) {
        checkedItemHashList.addAll(parentIds, id);
      } else {
        checkedItemHashList.removeAll(parentIds, id);
      }

      _this.setState({
        checkedItemsLastUpdate: checkedItemHashList.getLastUpdateStamp()
      });

      _this.props.onCheckListChange(checkedItemHashList);
    });

    _defineProperty(_assertThisInitialized(_this), "searchChangeHandler", function (searchingFor) {
      return _this.setState({
        searchingFor: searchingFor
      });
    });

    _defineProperty(_assertThisInitialized(_this), "searchClearHandler", function () {
      _this.setState({
        searchingFor: ''
      });
    });

    _defineProperty(_assertThisInitialized(_this), "loadData", function (props) {
      var dataSourceProvider = props.dataSourceProvider,
          onCheckListChange = props.onCheckListChange;
      dataSourceProvider.loadData().then(function () {
        var checkedItemHashList = dataSourceProvider.getChecked();
        var stateObject = {
          isDataLoaded: dataSourceProvider.isLoaded,
          checkedItemsLastUpdate: checkedItemHashList.getLastUpdateStamp()
        };

        var idOfFirstItem = _this.getIdOfFirstItem(props);

        if (idOfFirstItem !== null) {
          stateObject.selectedColumn = 1;
          stateObject.selectedId = idOfFirstItem;
        }

        _this.setState(stateObject);

        onCheckListChange(checkedItemHashList);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "refreshContent", function () {
      var _this$state = _this.state,
          selectedColumn = _this$state.selectedColumn,
          selectedId = _this$state.selectedId,
          searchingFor = _this$state.searchingFor;

      _this.columns.setSearchingFor(searchingFor);

      _this.columns.refresh(selectedColumn, selectedId);
    });

    var isDataLoaded = _props.dataSourceProvider.isLoaded;

    var _idOfFirstItem = _this.getIdOfFirstItem(_props);

    _this.state = {
      isDataLoaded: isDataLoaded,
      checkedItemsLastUpdate: 0,
      searchingFor: '',
      selectedColumn: _idOfFirstItem !== null ? 1 : 0,
      selectedId: _idOfFirstItem
    };
    _this.columns = new ColumnList(_props.dataSourceProvider);
    return _this;
  }

  var _proto = ViewTabContent.prototype;

  _proto.componentWillMount = function componentWillMount() {
    if (!this.state.isDataLoaded) {
      this.loadData(this.props);
    }
  };

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var isLoaded = nextProps.dataSourceProvider.isLoaded;
    var checked = nextProps.dataSourceProvider.getChecked();

    if (this.state.isDataLoaded !== isLoaded) {
      this.setState({
        isDataLoaded: isLoaded
      });
    }

    if (!isLoaded) {
      this.loadData(nextProps);
    }

    if (checked) {
      var lastUpdated = checked.getLastUpdateStamp();

      if (lastUpdated !== this.state.checkedItemsLastUpdate) {
        this.setState({
          checkedItemsLastUpdate: lastUpdated
        });
      }
    }
  };

  _proto.getIsCheckedAll = function getIsCheckedAll(parentIds) {
    var checkedItemHashList = this.props.dataSourceProvider.getChecked();
    return checkedItemHashList.getIsCheckedAll(parentIds);
  };

  _proto.getCheckedIds = function getCheckedIds(parentIds, data) {
    var _this2 = this;

    var checkedItemHashList = this.props.dataSourceProvider.getChecked();
    var result = checkedItemHashList.getCheckedItems(parentIds).map(function (i) {
      return i.id;
    }); // Adds all items that have checkedAll in children

    if (data && Array.isArray(data.items)) {
      data.items.forEach(function (item) {
        var currentParentIds = parentIds.slice();
        currentParentIds.push(item.id);

        if (_this2.getIsCheckedAll(currentParentIds)) {
          result.push(item.id);
        }
      });
    }

    return result;
  };

  _proto.render = function render() {
    return this.state.isDataLoaded ? this.getContent() : this.getSpinner();
  };

  return ViewTabContent;
}(React.PureComponent);

export { ViewTabContent as default };
ViewTabContent.defaultProps = {
  allLabel: 'All',
  listItemRenderFunction: null,
  searchPlaceHolder: 'Search...',
  searchTooltip: null,
  onCheckListChange: function onCheckListChange() {}
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,