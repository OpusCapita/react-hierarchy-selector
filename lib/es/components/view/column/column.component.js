function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import Checkbox from '@opuscapita/react-checkbox';
import PropTypes from 'prop-types';
import shortid from 'shortid';
import SelectableList from '../../selectable-list';
import ColumnData from '../../../models/column/column-data';
import './column.scss';

var ViewColumn =
/*#__PURE__*/
function (_React$PureComponent) {
  _inheritsLoose(ViewColumn, _React$PureComponent);

  function ViewColumn(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_this), "clickHandler", function (id, event) {
      _this.props.onClick(_this.props.index, id, event);
    });

    _defineProperty(_assertThisInitialized(_this), "checkHandler", function (id, checkState) {
      _this.props.onCheck(_this.props.referenceIds.slice(), id, checkState);
    });

    _defineProperty(_assertThisInitialized(_this), "checkAllHandler", function (e) {
      var newState = e.target.checked;

      _this.props.onCheckAll(_this.props.referenceIds.slice(), newState);

      _this.setState({
        checkedAll: newState
      });
    });

    _defineProperty(_assertThisInitialized(_this), "renderWrapperFunction", function (index) {
      return function (item, defaultRenderFunction) {
        return _this.props.itemRenderFunction(index, item, defaultRenderFunction);
      };
    });

    _this.id = shortid();
    _this.state = {
      checkedAll: _this.props.checkedAll
    };
    return _this;
  }

  var _proto = ViewColumn.prototype;

  _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.checkedAll !== this.props.checkedAll) {
      this.setState({
        checkedAll: nextProps.checkedAll
      });
    }
  };

  _proto.render = function render() {
    // TODO: 'All' text should be passed here to show translated text.
    var disabledProperty = this.props.checkedAllDisabled ? {
      disabled: true
    } : null;
    return React.createElement("div", {
      className: "oc-hierarchy-selector-column"
    }, React.createElement("div", {
      className: "oc-hierarchy-selector-column-all"
    }, !this.props.checkedAllHidden ? React.createElement(Checkbox, _extends({
      id: "oc-hierarchy-selector-select-all-" + this.id,
      name: "oc-hierarchy-selector-select-all-" + this.id,
      onChange: this.checkAllHandler,
      checked: this.state.checkedAll,
      label: this.props.allLabel
    }, disabledProperty)) : null), React.createElement(SelectableList, {
      checkedAll: this.props.checkedAll,
      checkDisabled: this.state.checkedAll,
      checkedIds: this.props.checkedIds,
      items: this.props.data.items,
      itemRenderFunction: this.props.itemRenderFunction ? this.renderWrapperFunction(this.props.index) : null,
      selectedId: this.props.selectedId,
      onCheck: this.checkHandler,
      onClick: this.clickHandler
    }));
  };

  return ViewColumn;
}(React.PureComponent);

export { ViewColumn as default };
ViewColumn.defaultProps = {
  allLabel: 'All',
  checkedAll: false,
  checkedAllDisabled: false,
  checkedAllHidden: false,
  data: new ColumnData(),
  itemRenderFunction: null,
  selectedId: null,
  referenceIds: [],
  onCheck: function onCheck() {},
  onCheckAll: function onCheckAll() {},
  onClick: function onClick() {},
  checkedIds: []
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,