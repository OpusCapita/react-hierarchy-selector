function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/no-unused-state */
import React from 'react';
import PropTypes from 'prop-types';
import { Modal } from 'react-bootstrap';
import ViewTopBar from './top-bar.component';
import ViewTabs from './tabs.component';
import SelectedItems from './selected-items';
import GroupName from './group-name';
import { preCheckedItemsListShape } from '../../types';
import { dataSourceProviderType } from '../../services/types';
import calculateGroupName from '../../services/group-name-calculation';
import './view.scss';

function getFirstCheckedItemHashList(lists) {
  var dataSourceKeys = Object.keys(lists);
  if (dataSourceKeys.length === 0) return null;
  return lists[dataSourceKeys[0]];
}

var HierarchySelectorView =
/*#__PURE__*/
function (_React$PureComponent) {
  _inheritsLoose(HierarchySelectorView, _React$PureComponent);

  function HierarchySelectorView(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_this), "getInitialLastUpdateStamp", function () {
      return '0';
    });

    _defineProperty(_assertThisInitialized(_this), "getLastUpdateStamp", function () {
      var stamp = Object.keys(_this.state.checkedItemHashLists).map(function (i) {
        return _this.state.checkedItemHashLists[i].getLastUpdateStamp();
      }).join('-');
      return stamp;
    });

    _defineProperty(_assertThisInitialized(_this), "getGroupName", function (hashList) {
      var _this$state = _this.state,
          groupName = _this$state.groupName,
          groupNameChangedByUser = _this$state.groupNameChangedByUser;
      return calculateGroupName(groupName, groupNameChangedByUser, hashList);
    });

    _defineProperty(_assertThisInitialized(_this), "getContent", function () {
      var listsHashArray = _this.state.checkedItemHashLists;
      var tabsItems = [{
        title: '',
        dataSourceProvider: _this.props.dataSourceProvider
      }];
      return React.createElement("div", {
        className: "oc-hierarchy-selector-view"
      }, React.createElement("div", {
        className: "oc-hierarchy-selector-tabs"
      }, React.createElement(ViewTabs, {
        allLabel: _this.props.allLabel,
        items: tabsItems,
        listItemRenderFunction: _this.props.listItemRenderFunction,
        onCheckListChange: _this.checkListChangeHandler,
        hideSingleTab: true,
        searchPlaceHolder: _this.props.searchPlaceHolder,
        searchTooltip: _this.props.searchTooltip
      })), React.createElement("div", {
        className: "oc-hierarchy-selector-selected-container"
      }, !_this.props.standalone && !_this.props.hideGroupNameInput && React.createElement(GroupName, {
        label: _this.props.groupNameLabel,
        placeHolder: _this.props.groupNamePlaceHolder,
        initialValue: _this.state.groupName,
        onChange: _this.groupNameChangeHandler
      }), React.createElement(SelectedItems, {
        allLabel: _this.props.allLabel,
        listLabel: _this.props.selectedItemListLabel,
        checkedItemLists: Object.keys(listsHashArray).map(function (i) {
          return listsHashArray[i];
        }),
        itemRenderFunction: _this.props.selectedItemRenderFunction,
        onItemRemove: _this.itemRemoveHandler
      })));
    });

    _defineProperty(_assertThisInitialized(_this), "getCanSelectStatus", function (groupName, lists) {
      var isClearable = _this.props.isClearable;
      var isGroupName = String(groupName).trim() !== '';
      var count = 0;
      Object.keys(lists).forEach(function (key) {
        count += lists[key].getCheckedItemsCount();
      });

      if (isClearable && count === 0) {
        return true;
      }

      return isGroupName && count > 0;
    });

    _defineProperty(_assertThisInitialized(_this), "getCheckedOutput", function () {
      // At this moment we provide results only for one data source
      var checkedItemHashList = getFirstCheckedItemHashList(_this.state.checkedItemHashLists);
      if (!checkedItemHashList) return [];
      var checkedOutput = checkedItemHashList.getCheckedOutput();
      var resultList = checkedOutput.checked || [];
      return resultList;
    });

    _defineProperty(_assertThisInitialized(_this), "getAllCheckedItems", function () {
      // At this moment we provide results only for one data source
      var checkedItemHashList = getFirstCheckedItemHashList(_this.state.checkedItemHashLists);
      if (!checkedItemHashList) return [];
      var checkedItems = checkedItemHashList.getAllCheckedItems();
      return checkedItems;
    });

    _defineProperty(_assertThisInitialized(_this), "createCheckedItemHashLists", function (dataSourceProvider) {
      var listHash = {};
      dataSourceProvider.preCheckItems();
      listHash[dataSourceProvider.id] = dataSourceProvider.getChecked();
      return listHash;
    });

    _defineProperty(_assertThisInitialized(_this), "groupNameChangeHandler", function (newValue) {
      _this.setState({
        canSelect: _this.getCanSelectStatus(newValue, _this.state.checkedItemHashLists),
        groupName: newValue,
        groupNameChangedByUser: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "cancelHandler", function () {
      _this.props.onCancel();
    });

    _defineProperty(_assertThisInitialized(_this), "selectHandler", function (flags) {
      var onSelect = _this.props.onSelect;
      var groupName = _this.state.groupName;

      var allCheckedItems = _this.getAllCheckedItems();

      var checkedOutput = _this.getCheckedOutput(); // If there's selected items, groupName can't be empty


      if (allCheckedItems && allCheckedItems.length > 0 && groupName.trim() === '') {
        throw new Error('State groupName is empty');
      }

      onSelect(groupName, allCheckedItems, checkedOutput, flags);
    });

    _defineProperty(_assertThisInitialized(_this), "checkListChangeHandler", function (checkedItemHashList) {
      if (checkedItemHashList) {
        var lists = _this.state.checkedItemHashLists;
        lists[checkedItemHashList.getId()] = checkedItemHashList;
        /* Getting group name after lists changing */

        var groupName = _this.getGroupName(lists);

        _this.setState({
          groupName: groupName,
          canSelect: _this.getCanSelectStatus(groupName, lists),
          checkedItemHashLists: lists,
          checkedItemsLastUpdate: _this.getLastUpdateStamp()
        });
      }

      _this.afterCheckListChanged();
    });

    _defineProperty(_assertThisInitialized(_this), "itemRemoveHandler", function () {
      var lists = _this.state.checkedItemHashLists;

      var groupName = _this.getGroupName(lists);

      _this.setState({
        groupName: groupName,
        canSelect: _this.getCanSelectStatus(groupName, lists),
        checkedItemsLastUpdate: _this.getLastUpdateStamp()
      });

      _this.afterCheckListChanged();
    });

    _defineProperty(_assertThisInitialized(_this), "afterCheckListChanged", function () {
      var resultList = _this.getCheckedOutput();

      _this.props.onCheckListChanged(resultList);
    });

    _defineProperty(_assertThisInitialized(_this), "show", function () {
      return _this.getContent();
    });

    _defineProperty(_assertThisInitialized(_this), "showInModal", function () {
      return React.createElement(Modal, {
        dialogClassName: "oc-hierarchy-selector-view-dialog",
        show: _this.state.visible,
        onHide: _this.cancelHandler,
        keyboard: false,
        backdrop: "static"
      }, React.createElement(Modal.Header, null, React.createElement(ViewTopBar, {
        selectDisabled: !_this.state.canSelect,
        title: _this.props.title,
        onCancel: _this.cancelHandler,
        onSelect: _this.selectHandler,
        onHelp: _this.props.onHelp,
        btnSelectLabel: _this.props.btnSelectLabel,
        btnCancelLabel: _this.props.btnCancelLabel,
        helpDisabled: _this.props.helpDisabled
      })), React.createElement(Modal.Body, null, _this.getContent()));
    });

    props.dataSourceProvider.setPrecheckedItems(props.preCheckedItems);

    var checkedItemHashLists = _this.createCheckedItemHashLists(props.dataSourceProvider);

    _this.state = {
      canSelect: _this.getCanSelectStatus(props.groupName, checkedItemHashLists),
      groupName: props.groupName,
      groupNameChangedByUser: props.groupName.trim() !== '',
      checkedItemHashLists: checkedItemHashLists,
      checkedItemsLastUpdate: _this.getInitialLastUpdateStamp(),
      visible: true
    };
    return _this;
  }

  var _proto = HierarchySelectorView.prototype;

  _proto.render = function render() {
    return this.props.showInModal && !this.props.standalone ? this.showInModal() : this.show();
  };

  return HierarchySelectorView;
}(React.PureComponent);

export { HierarchySelectorView as default };
HierarchySelectorView.defaultProps = {
  onCancel: function onCancel() {},
  onCheckListChanged: function onCheckListChanged() {},
  onSelect: function onSelect() {},
  onHelp: function onHelp() {},
  showInModal: true,
  allLabel: 'All',
  btnSelectLabel: 'Select',
  btnCancelLabel: 'Cancel',
  groupName: '',
  groupNameLabel: 'Group name',
  groupNamePlaceHolder: 'Please, fill a group name',
  listItemRenderFunction: null,
  preCheckedItems: null,
  searchPlaceHolder: 'Search...',
  searchTooltip: null,
  selectedItemListLabel: 'Selected items',
  selectedItemRenderFunction: null,
  standalone: false,
  title: '',
  helpDisabled: true,
  hideGroupNameInput: false,
  isClearable: false
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,