function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable jsx-a11y/no-static-element-interactions */

/* eslint-disable jsx-a11y/no-noninteractive-tabindex */
import React from 'react';
import PropTypes from 'prop-types';
import SearchBar from '@opuscapita/react-searchbar';
import { dataSourceProviderType } from '../../services/types';
import Search from '../../models/search';
import GroupEntity from '../../models/group.entity';
import CommonLayout from './layouts/common.layout';
import SpinnerLayout from './layouts/spinner.layout';
import HSSelectButton from './select-btn.component';
import PopoverSearchContent from './search/search-content.component';
import EventHandler from './event-handlers';
import { CLASS_NAME_SEARCH_FOCUSABLE } from './constants';
import Utils from '../../utils';
import './popover.scss';

var HierarchySelectorPopover =
/*#__PURE__*/
function (_React$PureComponent) {
  _inheritsLoose(HierarchySelectorPopover, _React$PureComponent);

  function HierarchySelectorPopover(props) {
    var _this;

    _this = _React$PureComponent.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_this), "onFocusOutHandler", function (e) {
      if (!Utils.isFocusOnCurrentTarget(e)) _this.props.onComponentBlur();
    });

    _defineProperty(_assertThisInitialized(_this), "onSearchChangeHandler", function (searchingFor) {
      return _this.setState({
        searchingFor: searchingFor
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onSelectHandler", function (data, flags) {
      var model = null;

      if (data) {
        var groupName = data.name ? data.name : 'Undefined';
        var items = Array.isArray(data) ? data : [data];
        model = new GroupEntity(groupName, items);
      }

      _this.props.onSelect(model, flags);
    });

    _defineProperty(_assertThisInitialized(_this), "onKeyDownHanlder", function (e) {
      EventHandler.searchElementFocusHanlder(e);
    });

    _defineProperty(_assertThisInitialized(_this), "getSearchElement", function () {
      return React.createElement(SearchBar, {
        autoFocus: true,
        defaltValue: _this.state.searchingFor,
        inputClassName: CLASS_NAME_SEARCH_FOCUSABLE,
        isDynamic: true,
        isTooltipEnabled: !!_this.props.searchTooltip,
        minChars: 2,
        translations: {
          tooltip: _this.props.searchTooltip,
          searchPlaceHolder: _this.props.searchPlaceHolder
        },
        onSearch: _this.onSearchChangeHandler,
        onClear: _this.props.onShouldClosePopover
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getLists", function () {
      return React.createElement("div", null, React.createElement(HSSelectButton, {
        label: _this.props.btnOpenViewLabel,
        onClick: _this.props.onShouldOpenView
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "getSearchLayout", function () {
      var searchModel = new Search(_this.props.dataSourceProvider);
      var foundItems = searchModel.getFoundFromHierarchy(_this.state.searchingFor);
      return React.createElement(PopoverSearchContent, {
        foundItems: foundItems,
        onSelect: _this.onSelectHandler,
        itemRenderFunction: _this.props.foundItemRenderFunction
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getMainLayout", function () {
      return React.createElement(CommonLayout, null, _this.getSearchElement(), _this.state.searchingFor !== '' ? _this.getSearchLayout() : _this.getLists());
    });

    _this.state = {
      isDataLoaded: props.dataSourceProvider.isLoaded,
      searchingFor: ''
    };
    return _this;
  }

  var _proto = HierarchySelectorPopover.prototype;

  _proto.componentWillMount = function componentWillMount() {
    var _this2 = this;

    if (!this.state.isDataLoaded) {
      this.props.dataSourceProvider.loadData().then(function () {
        _this2.setState({
          isDataLoaded: true
        });
      });
    }
  };

  _proto.componentDidMount = function componentDidMount() {
    this.mainElement.addEventListener('focusout', this.onFocusOutHandler);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mainElement.removeEventListener('focusout', this.onFocusOutHandler);
  };

  _proto.render = function render() {
    var _this3 = this;

    return React.createElement("div", {
      className: "oc-hierarchy-selector-popover",
      tabIndex: "0",
      ref: function ref(el) {
        _this3.mainElement = el;
      }
    }, this.state.isDataLoaded ? this.getMainLayout() : React.createElement(SpinnerLayout, null));
  };

  return HierarchySelectorPopover;
}(React.PureComponent);

export { HierarchySelectorPopover as default };
HierarchySelectorPopover.defaultProps = {
  onComponentBlur: function onComponentBlur() {},
  onSelect: function onSelect() {},
  onShouldOpenView: function onShouldOpenView() {},
  onShouldClosePopover: function onShouldClosePopover() {},
  foundItemRenderFunction: null,
  btnOpenViewLabel: 'Select...',
  searchPlaceHolder: 'Search...',
  searchTooltip: null
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,