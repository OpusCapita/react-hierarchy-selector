'use strict';

exports.__esModule = true;
exports.default = calculateGroupName;
var SOME_GROUP_NAME = 'Default group';

function calculateGroupName(groupName, changedByUser, checkedHashLists) {
  if (changedByUser) return groupName;

  var hashListKeys = Object.keys(checkedHashLists);
  /* No one hashList */
  if (hashListKeys.length === 0) return '';
  /* More then one hash list from different data sources */
  if (hashListKeys.length > 1) return SOME_GROUP_NAME;
  /* Initializing variables */
  var names = [];
  var checkedHash = checkedHashLists[hashListKeys[0]].get();
  var maxParentLength = 0;
  var i = 0;
  var j = 0;
  /* Starting looking for parents */
  var allParents = Object.keys(checkedHash).map(function (key) {
    var parentArray = checkedHash[key].getParents();
    if (parentArray.length > maxParentLength) maxParentLength = parentArray.length;

    return parentArray;
  });
  /* Iteration over all parent sets */
  while (i < maxParentLength) {
    var foundParent = null;
    var moreThanOneParent = false;
    for (j = 0; j < allParents.length; j += 1) {
      var el = allParents[j][i];
      if (el && el !== foundParent) {
        moreThanOneParent = foundParent !== null;
        if (moreThanOneParent) break;else foundParent = el;
      }
    }
    if (moreThanOneParent) break;else names.push(foundParent.name);

    i += 1;
  }
  if (names.length === 0) names.push(SOME_GROUP_NAME);

  return names.join(' / ');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9ncm91cC1uYW1lLWNhbGN1bGF0aW9uLmpzIl0sIm5hbWVzIjpbImNhbGN1bGF0ZUdyb3VwTmFtZSIsIlNPTUVfR1JPVVBfTkFNRSIsImdyb3VwTmFtZSIsImNoYW5nZWRCeVVzZXIiLCJjaGVja2VkSGFzaExpc3RzIiwiaGFzaExpc3RLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsIm5hbWVzIiwiY2hlY2tlZEhhc2giLCJnZXQiLCJtYXhQYXJlbnRMZW5ndGgiLCJpIiwiaiIsImFsbFBhcmVudHMiLCJtYXAiLCJrZXkiLCJwYXJlbnRBcnJheSIsImdldFBhcmVudHMiLCJmb3VuZFBhcmVudCIsIm1vcmVUaGFuT25lUGFyZW50IiwiZWwiLCJwdXNoIiwibmFtZSIsImpvaW4iXSwibWFwcGluZ3MiOiI7OztrQkFFd0JBLGtCO0FBRnhCLElBQU1DLGtCQUFrQixlQUF4Qjs7QUFFZSxTQUFTRCxrQkFBVCxDQUE0QkUsU0FBNUIsRUFBdUNDLGFBQXZDLEVBQXNEQyxnQkFBdEQsRUFBd0U7QUFDckYsTUFBSUQsYUFBSixFQUFtQixPQUFPRCxTQUFQOztBQUVuQixNQUFNRyxlQUFlQyxPQUFPQyxJQUFQLENBQVlILGdCQUFaLENBQXJCO0FBQ0E7QUFDQSxNQUFJQyxhQUFhRyxNQUFiLEtBQXdCLENBQTVCLEVBQStCLE9BQU8sRUFBUDtBQUMvQjtBQUNBLE1BQUlILGFBQWFHLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkIsT0FBT1AsZUFBUDtBQUM3QjtBQUNBLE1BQU1RLFFBQVEsRUFBZDtBQUNBLE1BQU1DLGNBQWNOLGlCQUFpQkMsYUFBYSxDQUFiLENBQWpCLEVBQWtDTSxHQUFsQyxFQUFwQjtBQUNBLE1BQUlDLGtCQUFrQixDQUF0QjtBQUNBLE1BQUlDLElBQUksQ0FBUjtBQUNBLE1BQUlDLElBQUksQ0FBUjtBQUNBO0FBQ0EsTUFBTUMsYUFBYVQsT0FBT0MsSUFBUCxDQUFZRyxXQUFaLEVBQXlCTSxHQUF6QixDQUE2QixVQUFDQyxHQUFELEVBQVM7QUFDdkQsUUFBTUMsY0FBY1IsWUFBWU8sR0FBWixFQUFpQkUsVUFBakIsRUFBcEI7QUFDQSxRQUFJRCxZQUFZVixNQUFaLEdBQXFCSSxlQUF6QixFQUEwQ0Esa0JBQWtCTSxZQUFZVixNQUE5Qjs7QUFFMUMsV0FBT1UsV0FBUDtBQUNELEdBTGtCLENBQW5CO0FBTUE7QUFDQSxTQUFPTCxJQUFJRCxlQUFYLEVBQTRCO0FBQzFCLFFBQUlRLGNBQWMsSUFBbEI7QUFDQSxRQUFJQyxvQkFBb0IsS0FBeEI7QUFDQSxTQUFLUCxJQUFJLENBQVQsRUFBWUEsSUFBSUMsV0FBV1AsTUFBM0IsRUFBbUNNLEtBQUssQ0FBeEMsRUFBMkM7QUFDekMsVUFBTVEsS0FBS1AsV0FBV0QsQ0FBWCxFQUFjRCxDQUFkLENBQVg7QUFDQSxVQUFJUyxNQUFNQSxPQUFPRixXQUFqQixFQUE4QjtBQUM1QkMsNEJBQW9CRCxnQkFBZ0IsSUFBcEM7QUFDQSxZQUFJQyxpQkFBSixFQUF1QixNQUF2QixLQUNLRCxjQUFjRSxFQUFkO0FBQ047QUFDRjtBQUNELFFBQUlELGlCQUFKLEVBQXVCLE1BQXZCLEtBQ0taLE1BQU1jLElBQU4sQ0FBV0gsWUFBWUksSUFBdkI7O0FBRUxYLFNBQUssQ0FBTDtBQUNEO0FBQ0QsTUFBSUosTUFBTUQsTUFBTixLQUFpQixDQUFyQixFQUF3QkMsTUFBTWMsSUFBTixDQUFXdEIsZUFBWDs7QUFFeEIsU0FBT1EsTUFBTWdCLElBQU4sQ0FBVyxLQUFYLENBQVA7QUFDRCIsImZpbGUiOiJncm91cC1uYW1lLWNhbGN1bGF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU09NRV9HUk9VUF9OQU1FID0gJ0RlZmF1bHQgZ3JvdXAnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FsY3VsYXRlR3JvdXBOYW1lKGdyb3VwTmFtZSwgY2hhbmdlZEJ5VXNlciwgY2hlY2tlZEhhc2hMaXN0cykge1xyXG4gIGlmIChjaGFuZ2VkQnlVc2VyKSByZXR1cm4gZ3JvdXBOYW1lO1xyXG5cclxuICBjb25zdCBoYXNoTGlzdEtleXMgPSBPYmplY3Qua2V5cyhjaGVja2VkSGFzaExpc3RzKTtcclxuICAvKiBObyBvbmUgaGFzaExpc3QgKi9cclxuICBpZiAoaGFzaExpc3RLZXlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xyXG4gIC8qIE1vcmUgdGhlbiBvbmUgaGFzaCBsaXN0IGZyb20gZGlmZmVyZW50IGRhdGEgc291cmNlcyAqL1xyXG4gIGlmIChoYXNoTGlzdEtleXMubGVuZ3RoID4gMSkgcmV0dXJuIFNPTUVfR1JPVVBfTkFNRTtcclxuICAvKiBJbml0aWFsaXppbmcgdmFyaWFibGVzICovXHJcbiAgY29uc3QgbmFtZXMgPSBbXTtcclxuICBjb25zdCBjaGVja2VkSGFzaCA9IGNoZWNrZWRIYXNoTGlzdHNbaGFzaExpc3RLZXlzWzBdXS5nZXQoKTtcclxuICBsZXQgbWF4UGFyZW50TGVuZ3RoID0gMDtcclxuICBsZXQgaSA9IDA7XHJcbiAgbGV0IGogPSAwO1xyXG4gIC8qIFN0YXJ0aW5nIGxvb2tpbmcgZm9yIHBhcmVudHMgKi9cclxuICBjb25zdCBhbGxQYXJlbnRzID0gT2JqZWN0LmtleXMoY2hlY2tlZEhhc2gpLm1hcCgoa2V5KSA9PiB7XHJcbiAgICBjb25zdCBwYXJlbnRBcnJheSA9IGNoZWNrZWRIYXNoW2tleV0uZ2V0UGFyZW50cygpO1xyXG4gICAgaWYgKHBhcmVudEFycmF5Lmxlbmd0aCA+IG1heFBhcmVudExlbmd0aCkgbWF4UGFyZW50TGVuZ3RoID0gcGFyZW50QXJyYXkubGVuZ3RoO1xyXG5cclxuICAgIHJldHVybiBwYXJlbnRBcnJheTtcclxuICB9KTtcclxuICAvKiBJdGVyYXRpb24gb3ZlciBhbGwgcGFyZW50IHNldHMgKi9cclxuICB3aGlsZSAoaSA8IG1heFBhcmVudExlbmd0aCkge1xyXG4gICAgbGV0IGZvdW5kUGFyZW50ID0gbnVsbDtcclxuICAgIGxldCBtb3JlVGhhbk9uZVBhcmVudCA9IGZhbHNlO1xyXG4gICAgZm9yIChqID0gMDsgaiA8IGFsbFBhcmVudHMubGVuZ3RoOyBqICs9IDEpIHtcclxuICAgICAgY29uc3QgZWwgPSBhbGxQYXJlbnRzW2pdW2ldO1xyXG4gICAgICBpZiAoZWwgJiYgZWwgIT09IGZvdW5kUGFyZW50KSB7XHJcbiAgICAgICAgbW9yZVRoYW5PbmVQYXJlbnQgPSBmb3VuZFBhcmVudCAhPT0gbnVsbDtcclxuICAgICAgICBpZiAobW9yZVRoYW5PbmVQYXJlbnQpIGJyZWFrO1xyXG4gICAgICAgIGVsc2UgZm91bmRQYXJlbnQgPSBlbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG1vcmVUaGFuT25lUGFyZW50KSBicmVhaztcclxuICAgIGVsc2UgbmFtZXMucHVzaChmb3VuZFBhcmVudC5uYW1lKTtcclxuXHJcbiAgICBpICs9IDE7XHJcbiAgfVxyXG4gIGlmIChuYW1lcy5sZW5ndGggPT09IDApIG5hbWVzLnB1c2goU09NRV9HUk9VUF9OQU1FKTtcclxuXHJcbiAgcmV0dXJuIG5hbWVzLmpvaW4oJyAvICcpO1xyXG59XHJcbiJdfQ==