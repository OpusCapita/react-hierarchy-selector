'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable no-param-reassign */

var index = new WeakMap();

function getHashFromIds(ids) {
  return ids.join('_');
}

function getIdsFromHash(hash) {
  return hash ? hash.split('_') : [];
}

function getFromIndex(obj, ids) {
  var dataIndex = index.get(obj);
  var hash = getHashFromIds(ids);
  return dataIndex[hash] ? Object.assign({}, dataIndex[hash]) : null;
}

function getParents(obj, hash) {
  var parents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var ids = getIdsFromHash(hash);
  if (ids.length > 1) {
    ids.pop();
    var newHash = getHashFromIds(ids);
    var dataIndex = index.get(obj);
    if (dataIndex[newHash] === undefined) throw new Error('Hash \'' + newHash + '\' is missed from an index');
    parents.unshift(dataIndex[newHash].item);
    getParents(obj, newHash, parents);
  }
  return parents;
}

function addIdToHash(hash, addedId) {
  var ids = getIdsFromHash(hash);
  return getHashFromIds([].concat(ids, [addedId]));
}

function createIndex(items) {
  var indexResult = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var parents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  Object.keys(items).forEach(function (key) {
    var item = items[key];
    var allIds = [].concat(parents, [item.id]);
    var hashKey = getHashFromIds(allIds);
    indexResult[hashKey] = {
      parentHash: getHashFromIds(parents),
      item: item
    };
    if (item.children && Array.isArray(item.children) && item.children.length > 0) {
      createIndex(item.children, indexResult, allIds);
    }
  });

  return indexResult;
}

var DataIndex = function DataIndex(data) {
  var _this = this;

  _classCallCheck(this, DataIndex);

  this.get = function () {
    return Object.assign({}, index.get(_this));
  };

  this.getHash = function (indexItem) {
    if (!indexItem) throw new Error('DataIndex::getParents(): there is no indexItem');
    if (!indexItem.item) throw new Error('DataIndex::getParents(): item is not found in indexItem');

    return addIdToHash(indexItem.parentHash, indexItem.item.id);
  };

  this.getHashFromIds = function (ids) {
    return getHashFromIds(ids);
  };

  this.getParentsByHash = function (hash) {
    return getParents(_this, hash);
  };

  this.getParents = function (indexItem) {
    return getParents(_this, _this.getHash(indexItem));
  };

  this.getFromIndex = function (parentIds, id) {
    return getFromIndex(_this, [].concat(parentIds, [id]));
  };

  this.clone = function () {
    return new DataIndex(_this);
  };

  this.forEach = function (callBack) {
    var dataIndex = index.get(_this);
    Object.keys(dataIndex).forEach(function (key) {
      var indexItem = dataIndex[key];
      callBack(indexItem.item, getIdsFromHash(indexItem.parentHash));
    });
  };

  if (data instanceof DataIndex) {
    index.set(this, data.get());
  } else {
    index.set(this, createIndex(data));
  }
};

exports.default = DataIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvZGF0YS1pbmRleC5qcyJdLCJuYW1lcyI6WyJpbmRleCIsIldlYWtNYXAiLCJnZXRIYXNoRnJvbUlkcyIsImlkcyIsImpvaW4iLCJnZXRJZHNGcm9tSGFzaCIsImhhc2giLCJzcGxpdCIsImdldEZyb21JbmRleCIsIm9iaiIsImRhdGFJbmRleCIsImdldCIsIk9iamVjdCIsImFzc2lnbiIsImdldFBhcmVudHMiLCJwYXJlbnRzIiwibGVuZ3RoIiwicG9wIiwibmV3SGFzaCIsInVuZGVmaW5lZCIsIkVycm9yIiwidW5zaGlmdCIsIml0ZW0iLCJhZGRJZFRvSGFzaCIsImFkZGVkSWQiLCJjcmVhdGVJbmRleCIsIml0ZW1zIiwiaW5kZXhSZXN1bHQiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImFsbElkcyIsImlkIiwiaGFzaEtleSIsInBhcmVudEhhc2giLCJjaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsIkRhdGFJbmRleCIsImRhdGEiLCJnZXRIYXNoIiwiaW5kZXhJdGVtIiwiZ2V0UGFyZW50c0J5SGFzaCIsInBhcmVudElkcyIsImNsb25lIiwiY2FsbEJhY2siLCJzZXQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUVBLElBQU1BLFFBQVEsSUFBSUMsT0FBSixFQUFkOztBQUVBLFNBQVNDLGNBQVQsQ0FBd0JDLEdBQXhCLEVBQTZCO0FBQzNCLFNBQU9BLElBQUlDLElBQUosQ0FBUyxHQUFULENBQVA7QUFDRDs7QUFFRCxTQUFTQyxjQUFULENBQXdCQyxJQUF4QixFQUE4QjtBQUM1QixTQUFPQSxPQUFPQSxLQUFLQyxLQUFMLENBQVcsR0FBWCxDQUFQLEdBQXlCLEVBQWhDO0FBQ0Q7O0FBRUQsU0FBU0MsWUFBVCxDQUFzQkMsR0FBdEIsRUFBMkJOLEdBQTNCLEVBQWdDO0FBQzlCLE1BQU1PLFlBQVlWLE1BQU1XLEdBQU4sQ0FBVUYsR0FBVixDQUFsQjtBQUNBLE1BQU1ILE9BQU9KLGVBQWVDLEdBQWYsQ0FBYjtB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QUswQixPQUFMLENBQWFDLFNBQWIsQ0FBakIsQ0FBYjtBQUFBLEdBckJLOztBQUFBLE9BdUJsQmpDLFlBdkJrQixHQXVCSCxVQUFDbUMsU0FBRCxFQUFZWCxFQUFaO0FBQUEsV0FBbUJ4Qiw4QkFBdUJtQyxTQUF2QixHQUFrQ1gsRUFBbEMsR0FBbkI7QUFBQSxHQXZCRzs7QUFBQSxPQXlCbEJZLEtBekJrQixHQXlCVjtBQUFBLFdBQU0sSUFBSU4sU0FBSixPQUFOO0FBQUEsR0F6QlU7O0FBQUEsT0EyQmxCVCxPQTNCa0IsR0EyQlIsVUFBQ2dCLFFBQUQsRUFBYztBQUN0QixRQUFNbkMsWUFBWVYsTUFBTVcsR0FBTixPQUFsQjtBQUNBQyxXQUFPZ0IsSUFBUCxDQUFZbEIsU0FBWixFQUF1Qm1CLE9BQXZCLENBQStCLFVBQUNDLEdBQUQsRUFBUztBQUN0QyxVQUFNVyxZQUFZL0IsVUFBVW9CLEdBQVYsQ0FBbEI7QUFDQWUsZUFBU0osVUFBVW5CLElBQW5CLEVBQXlCakIsZUFBZW9DLFVBQVVQLFVBQXpCLENBQXpCO0FBQ0QsS0FIRDtBQUlELEdBakNpQjs7QUFDaEIsTUFBSUssZ0JBQWdCRCxTQUFwQixFQUErQjtBQUM3QnRDLFVBQU04QyxHQUFOLENBQVUsSUFBVixFQUFnQlAsS0FBSzVCLEdBQUwsRUFBaEI7QUFDRCxHQUZELE1BRU87QUFDTFgsVUFBTThDLEdBQU4sQ0FBVSxJQUFWLEVBQWdCckIsWUFBWWMsSUFBWixDQUFoQjtBQUNEO0FBQ0YsQzs7a0JBUGtCRCxTIiwiZmlsZSI6ImRhdGEtaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuXG5jb25zdCBpbmRleCA9IG5ldyBXZWFrTWFwKCk7XG5cbmZ1bmN0aW9uIGdldEhhc2hGcm9tSWRzKGlkcykge1xuICByZXR1cm4gaWRzLmpvaW4oJ18nKTtcbn1cblxuZnVuY3Rpb24gZ2V0SWRzRnJvbUhhc2goaGFzaCkge1xuICByZXR1cm4gaGFzaCA/IGhhc2guc3BsaXQoJ18nKSA6IFtdO1xufVxuXG5mdW5jdGlvbiBnZXRGcm9tSW5kZXgob2JqLCBpZHMpIHtcbiAgY29uc3QgZGF0YUluZGV4ID0gaW5kZXguZ2V0KG9iaik7XG4gIGNvbnN0IGhhc2ggPSBnZXRIYXNoRnJvbUlkcyhpZHMpO1xuICByZXR1cm4gZGF0YUluZGV4W2hhc2hdID8gT2JqZWN0LmFzc2lnbih7fSwgZGF0YUluZGV4W2hhc2hdKSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudHMob2JqLCBoYXNoLCBwYXJlbnRzID0gW10pIHtcbiAgY29uc3QgaWRzID0gZ2V0SWRzRnJvbUhhc2goaGFzaCk7XG4gIGlmIChpZHMubGVuZ3RoID4gMSkge1xuICAgIGlkcy5wb3AoKTtcbiAgICBjb25zdCBuZXdIYXNoID0gZ2V0SGFzaEZyb21JZHMoaWRzKTtcbiAgICBjb25zdCBkYXRhSW5kZXggPSBpbmRleC5nZXQob2JqKTtcbiAgICBpZiAoZGF0YUluZGV4W25ld0hhc2hdID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcihgSGFzaCAnJHtuZXdIYXNofScgaXMgbWlzc2VkIGZyb20gYW4gaW5kZXhgKTtcbiAgICBwYXJlbnRzLnVuc2hpZnQoZGF0YUluZGV4W25ld0hhc2hdLml0ZW0pO1xuICAgIGdldFBhcmVudHMob2JqLCBuZXdIYXNoLCBwYXJlbnRzKTtcbiAgfVxuICByZXR1cm4gcGFyZW50cztcbn1cblxuZnVuY3Rpb24gYWRkSWRUb0hhc2goaGFzaCwgYWRkZWRJZCkge1xuICBjb25zdCBpZHMgPSBnZXRJZHNGcm9tSGFzaChoYXNoKTtcbiAgcmV0dXJuIGdldEhhc2hGcm9tSWRzKFsuLi5pZHMsIGFkZGVkSWRdKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5kZXgoaXRlbXMsIGluZGV4UmVzdWx0ID0ge30sIHBhcmVudHMgPSBbXSkge1xuICBPYmplY3Qua2V5cyhpdGVtcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgaXRlbSA9IGl0ZW1zW2tleV07XG4gICAgY29uc3QgYWxsSWRzID0gWy4uLnBhcmVudHMsIGl0ZW0uaWRdO1xuICAgIGNvbnN0IGhhc2hLZXkgPSBnZXRIYXNoRnJvbUlkcyhhbGxJZHMpO1xuICAgIGluZGV4UmVzdWx0W2hhc2hLZXldID0ge1xuICAgICAgcGFyZW50SGFzaDogZ2V0SGFzaEZyb21JZHMocGFyZW50cyksXG4gICAgICBpdGVtLFxuICAgIH07XG4gICAgaWYgKGl0ZW0uY2hpbGRyZW4gJiYgQXJyYXkuaXNBcnJheShpdGVtLmNoaWxkcmVuKSAmJiBpdGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGNyZWF0ZUluZGV4KGl0ZW0uY2hpbGRyZW4sIGluZGV4UmVzdWx0LCBhbGxJZHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGluZGV4UmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRhSW5kZXgge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBEYXRhSW5kZXgpIHtcbiAgICAgIGluZGV4LnNldCh0aGlzLCBkYXRhLmdldCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5kZXguc2V0KHRoaXMsIGNyZWF0ZUluZGV4KGRhdGEpKTtcbiAgICB9XG4gIH1cblxuICBnZXQgPSAoKSA9PiBPYmplY3QuYXNzaWduKHt9LCBpbmRleC5nZXQodGhpcykpO1xuXG4gIGdldEhhc2ggPSAoaW5kZXhJdGVtKSA9PiB7XG4gICAgaWYgKCFpbmRleEl0ZW0pIHRocm93IG5ldyBFcnJvcignRGF0YUluZGV4OjpnZXRQYXJlbnRzKCk6IHRoZXJlIGlzIG5vIGluZGV4SXRlbScpO1xuICAgIGlmICghaW5kZXhJdGVtLml0ZW0pIHRocm93IG5ldyBFcnJvcignRGF0YUluZGV4OjpnZXRQYXJlbnRzKCk6IGl0ZW0gaXMgbm90IGZvdW5kIGluIGluZGV4SXRlbScpO1xuXG4gICAgcmV0dXJuIGFkZElkVG9IYXNoKGluZGV4SXRlbS5wYXJlbnRIYXNoLCBpbmRleEl0ZW0uaXRlbS5pZCk7XG4gIH1cblxuICBnZXRIYXNoRnJvbUlkcyA9IGlkcyA9PiBnZXRIYXNoRnJvbUlkcyhpZHMpO1xuXG4gIGdldFBhcmVudHNCeUhhc2ggPSBoYXNoID0+IGdldFBhcmVudHModGhpcywgaGFzaCk7XG5cbiAgZ2V0UGFyZW50cyA9IGluZGV4SXRlbSA9PiBnZXRQYXJlbnRzKHRoaXMsIHRoaXMuZ2V0SGFzaChpbmRleEl0ZW0pKTtcblxuICBnZXRGcm9tSW5kZXggPSAocGFyZW50SWRzLCBpZCkgPT4gZ2V0RnJvbUluZGV4KHRoaXMsIFsuLi5wYXJlbnRJZHMsIGlkXSlcblxuICBjbG9uZSA9ICgpID0+IG5ldyBEYXRhSW5kZXgodGhpcyk7XG5cbiAgZm9yRWFjaCA9IChjYWxsQmFjaykgPT4ge1xuICAgIGNvbnN0IGRhdGFJbmRleCA9IGluZGV4LmdldCh0aGlzKTtcbiAgICBPYmplY3Qua2V5cyhkYXRhSW5kZXgpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY29uc3QgaW5kZXhJdGVtID0gZGF0YUluZGV4W2tleV07XG4gICAgICBjYWxsQmFjayhpbmRleEl0ZW0uaXRlbSwgZ2V0SWRzRnJvbUhhc2goaW5kZXhJdGVtLnBhcmVudEhhc2gpKTtcbiAgICB9KTtcbiAgfVxufVxuIl19