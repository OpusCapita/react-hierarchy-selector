"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _base = _interopRequireDefault(require("../base"));

var _checkedHashItem = _interopRequireDefault(require("./checked-hash-item"));

var _checkedOutput = _interopRequireDefault(require("./checked-output"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var sourceProvider = new WeakMap();
var providerId = new WeakMap();
var checked = new WeakMap();
var index = new WeakMap();
var lastUpdate = new WeakMap();

function clearAll(list) {
  checked.set(list, {});
}

function getChildHashesOfCheckedItems(list, hash) {
  var checkedItems = checked.get(list);
  var hashes = [];
  Object.keys(checkedItems).forEach(function (currentHash) {
    if (hash !== currentHash && currentHash.indexOf(hash) === 0) {
      hashes.push(currentHash);
    }
  });
  return hashes;
}

function removeItem(list, parentIds, id) {
  var checkedItems = checked.get(list);
  var dataIndex = index.get(list);
  var indexItem = dataIndex.getFromIndex(parentIds, id);

  if (indexItem) {
    var parentHash = indexItem.parentHash;

    if (checkedItems[parentHash]) {
      checkedItems[parentHash].removeCheckedItem(indexItem.item); // Checks if there is no checked items, then removes a hash

      if (checkedItems[parentHash].getCheckedItems().length === 0) {
        delete checkedItems[parentHash];
      }
    }
  }
}

function removeHash(list, hash) {
  var checkedItems = checked.get(list);

  if (checkedItems[hash]) {
    checkedItems[hash].uncheckAll();
    delete checkedItems[hash];
  }
}

function removeAllItems(list, parentIds, id) {
  var dataIndex = index.get(list);
  var indexItem = dataIndex.getFromIndex(parentIds, id);

  if (indexItem) {
    var hash = dataIndex.getHash(indexItem);
    removeHash(list, hash);
  }
}

function addItem(list, parentIds, id) {
  var checkedItems = checked.get(list);
  var dataIndex = index.get(list);
  var indexItem = dataIndex.getFromIndex(parentIds, id);

  if (indexItem) {
    var parentHash = indexItem.parentHash;
    var parents = dataIndex.getParents(indexItem);
    if (!checkedItems[parentHash]) checkedItems[parentHash] = new _checkedHashItem["default"](parents);
    var hashItem = checkedItems[parentHash];
    hashItem.addCheckedItem(indexItem.item);
  }
}

function addAllItems(list, parentIds, id) {
  var checkedItems = checked.get(list);
  var dataIndex = index.get(list);
  var indexItem = dataIndex.getFromIndex(parentIds, id);

  if (indexItem) {
    var hash = dataIndex.getHash(indexItem);
    var parents = [].concat(dataIndex.getParents(indexItem), [indexItem.item]);
    var childHashes = getChildHashesOfCheckedItems(list, hash) || [];
    childHashes.forEach(function (h) {
      removeHash(list, h);
    });
    if (!checkedItems[hash]) checkedItems[hash] = new _checkedHashItem["default"](parents);
    var hashItem = checkedItems[hash];
    hashItem.checkAll();
  }
}

function preCheckItems(list, preCheckedItems) {
  var dataIndex = index.get(list);

  var getHash = function getHash(parentId, id) {
    return parentId ? parentId + "_" + id : "" + id;
  };

  clearAll(list);

  if (dataIndex && preCheckedItems) {
    // creating a hash for pre-checked items to increase speed of searching
    var hashOfPreChecked = [];
    preCheckedItems.forEach(function (i) {
      var hs = getHash(i.parentId, i.id);
      hashOfPreChecked[hs] = i;
    });
    dataIndex.forEach(function (item, parentIds) {
      var hs = getHash(parentIds.length > 0 ? parentIds[parentIds.length - 1] : null, item.id);
      var found = hashOfPreChecked[hs];

      if (found) {
        if (found.isCheckedAll && Array.isArray(item.children) && item.children.length > 0) {
          addAllItems(list, parentIds, item.id);
        } else {
          addItem(list, parentIds, item.id);
        }
      }
    });
  }
}

function afterUpdate(list) {
  lastUpdate.set(list, Date.now());
}

var CheckedItemHashList =
/*#__PURE__*/
function (_BaseModel) {
  _inheritsLoose(CheckedItemHashList, _BaseModel);

  function CheckedItemHashList(dataSourceProvider) {
    var _this;

    _this = _BaseModel.call(this, dataSourceProvider) || this;

    _defineProperty(_assertThisInitialized(_this), "get", function () {
      return checked.get(_assertThisInitialized(_this));
    });

    _defineProperty(_assertThisInitialized(_this), "getAllCheckedItems", function () {
      var checkedHashArray = checked.get(_assertThisInitialized(_this));
      var list = [];
      Object.keys(checkedHashArray).forEach(function (key) {
        list = list.concat(checkedHashArray[key].getCheckedItems());
      });
      return list;
    });

    _defineProperty(_assertThisInitialized(_this), "getCheckedItems", function (parentIds) {
      if (parentIds === void 0) {
        parentIds = [];
      }

      var checkedHashItem = _this.getHashItem(parentIds);

      var result = [];

      if (checkedHashItem) {
        result = checkedHashItem.getCheckedItems();
      }

      return result;
    });

    _defineProperty(_assertThisInitialized(_this), "getIsCheckedAll", function (parentIds) {
      if (parentIds === void 0) {
        parentIds = [];
      }

      var checkedHashItem = _this.getHashItem(parentIds);

      return checkedHashItem ? checkedHashItem.isCheckedAll() : false;
    });

    _defineProperty(_assertThisInitialized(_this), "getCheckedItemsCount", function () {
      var checkedHashArray = checked.get(_assertThisInitialized(_this));
      var count = 0;
      Object.keys(checkedHashArray).forEach(function (key) {
        count += checkedHashArray[key].getCheckedItems().length;
      });
      return count;
    });

    _defineProperty(_assertThisInitialized(_this), "getId", function () {
      return providerId.get(_assertThisInitialized(_this));
    });

    _defineProperty(_assertThisInitialized(_this), "getHashItem", function (parentIds) {
      if (parentIds === void 0) {
        parentIds = [];
      }

      var checkedHashArray = checked.get(_assertThisInitialized(_this));
      var dataIndex = index.get(_assertThisInitialized(_this));
      var hash = dataIndex.getHashFromIds(parentIds);

      if (hash === '' || !checkedHashArray[hash]) {
        return null;
      }

      return checkedHashArray[hash];
    });

    _defineProperty(_assertThisInitialized(_this), "getLastUpdateStamp", function () {
      return lastUpdate.get(_assertThisInitialized(_this));
    });

    _defineProperty(_assertThisInitialized(_this), "getCheckedOutput", function () {
      var resultObject = {
        dataSourceProviderId: _this.getId(),
        checked: []
      };
      var checkedOutput = new _checkedOutput["default"]();
      var hashes = checked.get(_assertThisInitialized(_this));
      Object.keys(hashes).forEach(function (hash) {
        var checkedHashItem = hashes[hash];
        checkedOutput.add(checkedHashItem);
      });
      resultObject.checked = checkedOutput.get();
      return resultObject;
    });

    _defineProperty(_assertThisInitialized(_this), "add", function (parentIds, id) {
      addItem(_assertThisInitialized(_this), parentIds, id);
      afterUpdate(_assertThisInitialized(_this));
    });

    _defineProperty(_assertThisInitialized(_this), "addAll", function (parentIds, id) {
      addAllItems(_assertThisInitialized(_this), parentIds, id);
      afterUpdate(_assertThisInitialized(_this));
    });

    _defineProperty(_assertThisInitialized(_this), "createCopy", function () {
      var copy = new CheckedItemHashList(sourceProvider.get(_assertThisInitialized(_this)));
      providerId.set(copy, providerId.get(_assertThisInitialized(_this)));
      lastUpdate.set(copy, lastUpdate.get(_assertThisInitialized(_this)));
      index.set(copy, index.get(_assertThisInitialized(_this)).clone());
      var chkd = Object.assign({}, checked.get(_assertThisInitialized(_this)));
      Object.keys(chkd).forEach(function (key) {
        chkd[key] = chkd[key].createCopy();
      });
      checked.set(copy, chkd);
      return copy;
    });

    _defineProperty(_assertThisInitialized(_this), "clearAll", function () {
      clearAll(_assertThisInitialized(_this));
    });

    _defineProperty(_assertThisInitialized(_this), "preCheckItems", function (preCheckedItems) {
      preCheckItems(_assertThisInitialized(_this), preCheckedItems);
      afterUpdate(_assertThisInitialized(_this));
    });

    _defineProperty(_assertThisInitialized(_this), "remove", function (parentIds, id) {
      removeItem(_assertThisInitialized(_this), parentIds, id);
      afterUpdate(_assertThisInitialized(_this));
    });

    _defineProperty(_assertThisInitialized(_this), "removeAll", function (parentIds, id) {
      removeAllItems(_assertThisInitialized(_this), parentIds, id);
      afterUpdate(_assertThisInitialized(_this));
    });

    _defineProperty(_assertThisInitialized(_this), "removeHash", function (hash) {
      removeHash(_assertThisInitialized(_this), hash);
      afterUpdate(_assertThisInitialized(_this));
    });

    _defineProperty(_assertThisInitialized(_this), "toString", function () {
      var list = checked.get(_assertThisInitialized(_this));
      var result = {};
      Object.keys(list).forEach(function (key) {
        var item = list[key];
        result[key] = {
          checkedAll: item.isCheckedAll(),
          checkedItems: item.getCheckedItems()
        };
      });
      return JSON.stringify({
        id: _this.getId(),
        lastUpdateStamp: _this.getLastUpdateStamp(),
        checked: result
      }, null, 2);
    });

    sourceProvider.set(_assertThisInitialized(_this), dataSourceProvider);
    providerId.set(_assertThisInitialized(_this), dataSourceProvider.id);
    lastUpdate.set(_assertThisInitialized(_this), 0);
    checked.set(_assertThisInitialized(_this), {});
    index.set(_assertThisInitialized(_this), dataSourceProvider.getIndex());
    return _this;
  }

  return CheckedItemHashList;
}(_base["default"]);

var _default = CheckedItemHashList;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,