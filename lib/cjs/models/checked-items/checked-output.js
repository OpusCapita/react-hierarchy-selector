'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var output = new WeakMap();

function getOutputObject(item, parentIds, isCheckedAll) {
  var currentItem = item ? Object.assign({}, item) : {};

  currentItem.id = currentItem.id || null;
  currentItem.name = currentItem.name || '';
  currentItem.children = currentItem.children || [];

  return {
    id: currentItem.id,
    name: currentItem.name,
    level: parentIds.length + 1,
    parentId: parentIds.length > 0 ? parentIds[parentIds.length - 1] : null,
    parentIds: parentIds,
    isCheckedAll: isCheckedAll,
    isChildren: Array.isArray(currentItem.children) && currentItem.children.length > 0
  };
}

function addToOutput(obj, checkedHashItem) {
  var currentOutput = output.get(obj);
  var isCheckedAll = checkedHashItem.isCheckedAll();
  var parents = checkedHashItem.getParents();

  if (isCheckedAll) {
    var item = parents[parents.length - 1];
    parents.pop();
    var parentIds = parents.map(function (i) {
      return i.id;
    });
    currentOutput.push(getOutputObject(item, parentIds, isCheckedAll));
  } else {
    var checkedItems = checkedHashItem.getCheckedItems();
    var _parentIds = parents.map(function (i) {
      return i.id;
    });
    checkedItems.forEach(function (item) {
      currentOutput.push(getOutputObject(item, _parentIds, isCheckedAll));
    });
  }
}

var CheckedOutput = function CheckedOutput() {
  var _this = this;

  _classCallCheck(this, CheckedOutput);

  this.get = function () {
    return output.get(_this).slice();
  };

  this.add = function (checkedHashItem) {
    addToOutput(_this, checkedHashItem);
  };

  this.clear = function () {
    output.get(_this).splice(0);
  };

  output.set(this, []);
};

exports.default = CheckedOutput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2hlY2tlZC1pdGVtcy9jaGVja2VkLW91dHB1dC5qcyJdLCJuYW1lcyI6WyJvdXRwdXQiLCJXZWFrTWFwIiwiZ2V0T3V0cHV0T2JqZWN0IiwiaXRlbSIsInBhcmVudElkcyIsImlzQ2hlY2tlZEFsbCIsImN1cnJlbnRJdGVtIiwiT2JqZWN0IiwiYXNzaWduIiwiaWQiLCJuYW1lIiwiY2hpbGRyZW4iLCJsZXZlbCIsImxlbmd0aCIsInBhcmVudElkIiwiaXNDaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsImFkZFRvT3V0cHV0Iiwib2JqIiwiY2hlY2tlZEhhc2hJdGVtIiwiY3VycmVudE91dHB1dCIsImdldCIsInBhcmVudHMiLCJnZXRQYXJlbnRzIiwicG9wIiwibWFwIiwiaSIsInB1c2giLCJjaGVja2VkSXRlbXMiLCJnZXRDaGVja2VkSXRlbXMiLCJmb3JFYWNoIiwiQ2hlY2tlZE91dHB1dCIsInNsaWNlIiwiYWRkIiwiY2xlYXIiLCJzcGxpY2UiLCJzZXQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQU1BLFNBQVMsSUFBSUMsT0FBSixFQUFmOztBQUVBLFNBQVNDLGVBQVQsQ0FBeUJDLElBQXpCLEVBQStCQyxTQUEvQixFQUEwQ0MsWUFBMUMsRUFBd0Q7QUFDdEQsTUFBTUMsY0FBY0gsT0FBT0ksT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JMLElBQWxCLENBQVAsR0FBaUMsRUFBckQ7O0FBRUFHLGNBQVlHLEVBQVosR0FBaUJILFlBQVlHLEVBQVosSUFBa0IsSUFBbkM7QUFDQUgsY0FBWUksSUFBWixHQUFtQkosWUFBWUksSUFBWixJQUFvQixFQUF2QztBQUNBSixjQUFZSyxRQUFaLEdBQXVCTCxZQUFZSyxRQUFaLElBQXdCLEVBQS9DOztBQUVBLFNBQU87QUFDTEYsUUFBSUgsWUFBWUcsRUFEWDtBQUVMQyxVQUFNSixZQUFZSSxJQUZiO0FBR0xFLFdBQU9SLFVBQVVTLE1BQVYsR0FBbUIsQ0FIckI7QUFJTEMsY0FBVVYsVUFBVVMsTUFBVixHQUFtQixDQUFuQixHQUF1QlQsVUFBVUEsVUFBVVMsTUFBVixHQUFtQixDQUE3QixDQUF2QixHQUF5RCxJQUo5RDtBQUtMVCx3QkFMSztBQU1MQyw4QkFOSztBQU9MVSxnQkFBWUMsTUFBTUMsT0FBTixDQUFjWCxZQUFZSyxRQUExQixLQUF1Q0wsWUFBWUssUUFBWixDQUFxQkUsTUFBckIsR0FBOEI7QUFQNUUsR0FBUDtBQVNEOztBQUVELFNBQVNLLFdBQVQsQ0FBcUJDLEdBQXJCLEVBQTBCQyxlQUExQixFQUEyQztBQUN6QyxNQUFNQyxnQkFBZ0JyQixPQUFPc0IsR0FBUCxDQUFXSCxHQUFYLENBQXRCO0FBQ0EsTUFBTWQsZUFBZWUsZ0JBQWdCZixZQUFoQixFQUFyQjtBQUNBLE1BQU1rQixVQUFVSCxnQkFBZ0JJLFVBQWhCLEVBQWhCOztBQUVBLE1BQUluQixZQUFKLEVBQWtCO0FBQ2hCLFFBQU1GLE9BQU9vQixRQUFRQSxRQUFRVixNQUFSLEdBQWlCLENBQXpCLENBQWI7QUFDQVUsWUFBUUUsR0FBUjtBQUNBLFFBQU1yQixZQUFZbUIsUUFBUUcsR0FBUixDQUFZO0FBQUEsYUFBS0MsRUFBRWxCLEVBQVA7QUFBQSxLQUFaLENBQWxCO0FBQ0FZLGtCQUFjTyxJQUFkLENBQW1CMUIsZ0JBQWdCQyxJQUFoQixFQUFzQkMsU0FBdEIsRUFBaUNDLFlBQWpDLENBQW5CO0FBQ0QsR0FMRCxNQUtPO0FBQ0wsUUFBTXdCLGVBQWVULGdCQUFnQlUsZUFBaEIsRUFBckI7QUFDQSxRQUFNMUIsYUFBWW1CLFFBQVFHLEdBQVIsQ0FBWTtBQUFBLGFBQUtDLEVBQUVsQixFQUFQO0FBQUEsS0FBWixDQUFsQjtBQUNBb0IsaUJBQWFFLE9BQWIsQ0FBcUIsVUFBQzVCLElBQUQsRUFBVTtBQUM3QmtCLG9CQUFjTyxJQUFkLENBQW1CMUIsZ0JBQWdCQyxJQUFoQixFQUFzQkMsVUFBdEIsRUFBaUNDLFlBQWpDLENBQW5CO0FBQ0QsS0FGRDtBQUdEO0FBQ0Y7O0lBRW9CMkIsYSxHQUNuQix5QkFBYztBQUFBOztBQUFBOztBQUFBLE9BSWRWLEdBSmMsR0FJUjtBQUFBLFdBQU10QixPQUFPc0IsR0FBUCxRQUFpQlcsS0FBakIsRUFBTjtBQUFBLEdBSlE7O0FBQUEsT0FNZEMsR0FOYyxHQU1SLFVBQUNkLGVBQUQsRUFBcUI7QUFDekJGLHVCQUFrQkUsZUFBbEI7QUFDRCxHQVJhOztBQUFBLE9BVWRlLEtBVmMsR0FVTixZQUFNO0FBQ1puQyxXQUFPc0IsR0FBUCxRQUFpQmMsTUFBakIsQ0FBd0IsQ0FBeEI7QUFDRCxHQVphOztBQUNacEMsU0FBT3FDLEdBQVAsQ0FBVyxJQUFYLEVBQWlCLEVBQWpCO0FBQ0QsQzs7a0JBSGtCTCxhIiwiZmlsZSI6ImNoZWNrZWQtb3V0cHV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmNvbnN0IG91dHB1dCA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG5mdW5jdGlvbiBnZXRPdXRwdXRPYmplY3QoaXRlbSwgcGFyZW50SWRzLCBpc0NoZWNrZWRBbGwpIHtcclxuICBjb25zdCBjdXJyZW50SXRlbSA9IGl0ZW0gPyBPYmplY3QuYXNzaWduKHt9LCBpdGVtKSA6IHt9O1xyXG5cclxuICBjdXJyZW50SXRlbS5pZCA9IGN1cnJlbnRJdGVtLmlkIHx8IG51bGw7XHJcbiAgY3VycmVudEl0ZW0ubmFtZSA9IGN1cnJlbnRJdGVtLm5hbWUgfHwgJyc7XHJcbiAgY3VycmVudEl0ZW0uY2hpbGRyZW4gPSBjdXJyZW50SXRlbS5jaGlsZHJlbiB8fCBbXTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGlkOiBjdXJyZW50SXRlbS5pZCxcclxuICAgIG5hbWU6IGN1cnJlbnRJdGVtLm5hbWUsXHJcbiAgICBsZXZlbDogcGFyZW50SWRzLmxlbmd0aCArIDEsXHJcbiAgICBwYXJlbnRJZDogcGFyZW50SWRzLmxlbmd0aCA+IDAgPyBwYXJlbnRJZHNbcGFyZW50SWRzLmxlbmd0aCAtIDFdIDogbnVsbCxcclxuICAgIHBhcmVudElkcyxcclxuICAgIGlzQ2hlY2tlZEFsbCxcclxuICAgIGlzQ2hpbGRyZW46IEFycmF5LmlzQXJyYXkoY3VycmVudEl0ZW0uY2hpbGRyZW4pICYmIGN1cnJlbnRJdGVtLmNoaWxkcmVuLmxlbmd0aCA+IDAsXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkVG9PdXRwdXQob2JqLCBjaGVja2VkSGFzaEl0ZW0pIHtcclxuICBjb25zdCBjdXJyZW50T3V0cHV0ID0gb3V0cHV0LmdldChvYmopO1xyXG4gIGNvbnN0IGlzQ2hlY2tlZEFsbCA9IGNoZWNrZWRIYXNoSXRlbS5pc0NoZWNrZWRBbGwoKTtcclxuICBjb25zdCBwYXJlbnRzID0gY2hlY2tlZEhhc2hJdGVtLmdldFBhcmVudHMoKTtcclxuXHJcbiAgaWYgKGlzQ2hlY2tlZEFsbCkge1xyXG4gICAgY29uc3QgaXRlbSA9IHBhcmVudHNbcGFyZW50cy5sZW5ndGggLSAxXTtcclxuICAgIHBhcmVudHMucG9wKCk7XHJcbiAgICBjb25zdCBwYXJlbnRJZHMgPSBwYXJlbnRzLm1hcChpID0+IGkuaWQpO1xyXG4gICAgY3VycmVudE91dHB1dC5wdXNoKGdldE91dHB1dE9iamVjdChpdGVtLCBwYXJlbnRJZHMsIGlzQ2hlY2tlZEFsbCkpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBjaGVja2VkSXRlbXMgPSBjaGVja2VkSGFzaEl0ZW0uZ2V0Q2hlY2tlZEl0ZW1zKCk7XHJcbiAgICBjb25zdCBwYXJlbnRJZHMgPSBwYXJlbnRzLm1hcChpID0+IGkuaWQpO1xyXG4gICAgY2hlY2tlZEl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgY3VycmVudE91dHB1dC5wdXNoKGdldE91dHB1dE9iamVjdChpdGVtLCBwYXJlbnRJZHMsIGlzQ2hlY2tlZEFsbCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGVja2VkT3V0cHV0IHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIG91dHB1dC5zZXQodGhpcywgW10pO1xyXG4gIH1cclxuXHJcbiAgZ2V0ID0gKCkgPT4gb3V0cHV0LmdldCh0aGlzKS5zbGljZSgpO1xyXG5cclxuICBhZGQgPSAoY2hlY2tlZEhhc2hJdGVtKSA9PiB7XHJcbiAgICBhZGRUb091dHB1dCh0aGlzLCBjaGVja2VkSGFzaEl0ZW0pO1xyXG4gIH1cclxuXHJcbiAgY2xlYXIgPSAoKSA9PiB7XHJcbiAgICBvdXRwdXQuZ2V0KHRoaXMpLnNwbGljZSgwKTtcclxuICB9XHJcbn1cclxuIl19