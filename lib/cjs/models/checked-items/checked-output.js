'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var output = new WeakMap();

function getOutputObject(item, parentIds, isCheckedAll) {
  var currentItem = item ? Object.assign({}, item) : {};

  currentItem.id = currentItem.id || null;
  currentItem.name = currentItem.name || '';
  currentItem.children = currentItem.children || [];

  return {
    id: currentItem.id,
    name: currentItem.name,
    level: parentIds.length + 1,
    parentId: parentIds.length > 0 ? parentIds[parentIds.length - 1] : null,
    parentIds: parentIds,
    isCheckedAll: isCheckedAll,
    isChildren: Array.isArray(currentItem.children) && currentItem.children.length > 0
  };
}

function addToOutput(obj, checkedHashItem) {
  var currentOutput = output.get(obj);
  var isCheckedAll = checkedHashItem.isCheckedAll();
  var parents = checkedHashItem.getParents();

  if (isCheckedAll) {
    var item = parents[parents.length - 1];
    parents.pop();
    var parentIds = parents.map(function (i) {
      return i.id;
    });
    currentOutput.push(getOutputObject(item, parentIds, isCheckedAll));
  } else {
    var checkedItems = checkedHashItem.getCheckedItems();
    var _parentIds = parents.map(function (i) {
      return i.id;
    });
    checkedItems.forEach(function (item) {
      currentOutput.push(getOutputObject(item, _parentIds, isCheckedAll));
    });
  }
}

var CheckedOutput = function CheckedOutput() {
  var _this = this;

  _classCallCheck(this, CheckedOutput);

  this.get = function () {
    return output.get(_this).slice();
  };

  this.add = function (checkedHashItem) {
    addToOutput(_this, checkedHashItem);
  };

  this.clear = function () {
    output.get(_this).splice(0);
  };

  output.set(this, []);
};

exports.default = CheckedOutput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2hlY2tlZC1pdGVtcy9jaGVja2VkLW91dHB1dC5qcyJdLCJuYW1lcyI6WyJvdXRwdXQiLCJXZWFrTWFwIiwiZ2V0T3V0cHV0T2JqZWN0IiwiaXRlbSIsInBhcmVudElkcyIsImlzQ2hlY2tlZEFsbCIsImN1cnJlbnRJdGVtIiwiT2JqZWN0IiwiYXNzaWduIiwiaWQiLCJuYW1lIiwiY2hpbGRyZW4iLCJsZXZlbCIsImxlbmd0aCIsInBhcmVudElkIiwiaXNDaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsImFkZFRvT3V0cHV0Iiwib2JqIiwiY2hlY2tlZEhhc2hJdGVtIiwiY3VycmVudE91dHB1dCIsImdldCIsInBhcmVudHMiLCJnZXRQYXJlbnRzIiwicG9wIiwibWFwIiwiaSIsInB1c2giLCJjaGVja2VkSXRlbXMiLCJnZXRDaGVja2VkSXRlbXMiLCJmb3JFYWNoIiwiQ2hlY2tlZE91dHB1dCIsInNsaWNlIiwiYWRkIiwiY2xlYXIiLCJzcGxpY2UiLCJzZXQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLElBQU1BLFNBQVMsSUFBSUMsT0FBSixFQUFmOztBQUVBLFNBQVNDLGVBQVQsQ0FBeUJDLElBQXpCLEVBQStCQyxTQUEvQixFQUEwQ0MsWUFBMUMsRUFBd0Q7QUFDdEQsTUFBTUMsY0FBY0gsT0FBT0ksT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JMLElBQWxCLENBQVAsR0FBaUMsRUFBckQ7O0FBRUFHLGNBQVlHLEVBQVosR0FBaUJILFlBQVlHLEVBQVosSUFBa0IsSUFBbkM7QUFDQUgsY0FBWUksSUFBWixHQUFtQkosWUFBWUksSUFBWixJQUFvQixFQUF2QztBQUNBSixjQUFZSyxRQUFaLEdBQXVCTCxZQUFZSyxRQUFaLElBQXdCLEVBQS9DOztBQUVBLFNBQU87QUFDTEYsUUFBSUgsWUFBWUcsRUFEWDtBQUVMQyxVQUFNSixZQUFZSSxJQUZiO0FBR0xFLFdBQU9SLFVBQVVTLE1BQVYsR0FBbUIsQ0FIckI7QUFJTEMsY0FBVVYsVUFBVVMsTUFBVixHQUFtQixDQUFuQixHQUF1QlQsVUFBVUEsVUFBVVMsTUFBVixHQUFtQixDQUE3QixDQUF2QixHQUF5RCxJQUo5RDtBQUtMVCx3QkFMSztBQU1MQyw4QkFOSztBQU9MVSxnQkFBWUMsTUFBTUMsT0FBTixDQUFjWCxZQUFZSyxRQUExQixLQUF1Q0wsWUFBWUssUUFBWixDQUFxQkUsTUFBckIsR0FBOEI7QUFQNUUsR0FBUDtBQVNEOztBQUVELFNBQVNLLFdBQVQsQ0FBcUJDLEdBQXJCLEVBQTBCQyxlQUExQixFQUEyQztBQUN6QyxNQUFNQyxnQkFBZ0JyQixPQUFPc0IsR0FBUCxDQUFXSCxHQUFYLENBQXRCO0FBQ0EsTUFBTWQsZUFBZWUsZ0JBQWdCZixZQUFoQixFQUFyQjtBQUNBLE1BQU1rQixVQUFVSCxnQkFBZ0JJLFVBQWhCLEVBQWhCOztBQUVBLE1BQUluQixZQUFKLEVBQWtCO0FBQ2hCLFFBQU1GLE9BQU9vQixRQUFRQSxRQUFRVixNQUFSLEdBQWlCLENBQXpCLENBQWI7QUFDQVUsWUFBUUUsR0FBUjtBQUNBLFFBQU1yQixZQUFZbUIsUUFBUUcsR0FBUixDQUFZO0FBQUEsYUFBS0MsRUFBRWxCLEVBQVA7QUFBQSxLQUFaLENBQWxCO0FBQ0FZLGtCQUFjTyxJQUFkLENBQW1CMUIsZ0JBQWdCQyxJQUFoQixFQUFzQkMsU0FBdEIsRUFBaUNDLFlBQWpDLENBQW5CO0FBQ0QsR0FMRCxNQUtPO0FBQ0wsUUFBTXdCLGVBQWVULGdCQUFnQlUsZUFBaEIsRUFBckI7QUFDQSxRQUFNMUIsYUFBWW1CLFFBQVFHLEdBQVIsQ0FBWTtBQUFBLGFBQUtDLEVBQUVsQixFQUFQO0FBQUEsS0FBWixDQUFsQjtBQUNBb0IsaUJBQWFFLE9BQWIsQ0FBcUIsVUFBQzVCLElBQUQsRUFBVTtBQUM3QmtCLG9CQUFjTyxJQUFkLENBQW1CMUIsZ0JBQWdCQyxJQUFoQixFQUFzQkMsVUFBdEIsRUFBaUNDLFlBQWpDLENBQW5CO0FBQ0QsS0FGRDtBQUdEO0FBQ0Y7O0lBRW9CMkIsYSxHQUNuQix5QkFBYztBQUFBOztBQUFBOztBQUFBLE9BSWRWLEdBSmMsR0FJUjtBQUFBLFdBQU10QixPQUFPc0IsR0FBUCxDQUFXLEtBQVgsRUFBaUJXLEtBQWpCLEVBQU47QUFBQSxHQUpROztBQUFBLE9BTWRDLEdBTmMsR0FNUixVQUFDZCxlQUFELEVBQXFCO0FBQ3pCRixnQkFBWSxLQUFaLEVBQWtCRSxlQUFsQjtBQUNELEdBUmE7O0FBQUEsT0FVZGUsS0FWYyxHQVVOLFlBQU07QUFDWm5DLFdBQU9zQixHQUFQLENBQVcsS0FBWCxFQUFpQmMsTUFBakIsQ0FBd0IsQ0FBeEI7QUFDRCxHQVphOztBQUNacEMsU0FBT3FDLEdBQVAsQ0FBVyxJQUFYLEVBQWlCLEVBQWpCO0FBQ0QsQzs7a0JBSGtCTCxhIiwiZmlsZSI6ImNoZWNrZWQtb3V0cHV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCBvdXRwdXQgPSBuZXcgV2Vha01hcCgpO1xuXG5mdW5jdGlvbiBnZXRPdXRwdXRPYmplY3QoaXRlbSwgcGFyZW50SWRzLCBpc0NoZWNrZWRBbGwpIHtcbiAgY29uc3QgY3VycmVudEl0ZW0gPSBpdGVtID8gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSkgOiB7fTtcblxuICBjdXJyZW50SXRlbS5pZCA9IGN1cnJlbnRJdGVtLmlkIHx8IG51bGw7XG4gIGN1cnJlbnRJdGVtLm5hbWUgPSBjdXJyZW50SXRlbS5uYW1lIHx8ICcnO1xuICBjdXJyZW50SXRlbS5jaGlsZHJlbiA9IGN1cnJlbnRJdGVtLmNoaWxkcmVuIHx8IFtdO1xuXG4gIHJldHVybiB7XG4gICAgaWQ6IGN1cnJlbnRJdGVtLmlkLFxuICAgIG5hbWU6IGN1cnJlbnRJdGVtLm5hbWUsXG4gICAgbGV2ZWw6IHBhcmVudElkcy5sZW5ndGggKyAxLFxuICAgIHBhcmVudElkOiBwYXJlbnRJZHMubGVuZ3RoID4gMCA/IHBhcmVudElkc1twYXJlbnRJZHMubGVuZ3RoIC0gMV0gOiBudWxsLFxuICAgIHBhcmVudElkcyxcbiAgICBpc0NoZWNrZWRBbGwsXG4gICAgaXNDaGlsZHJlbjogQXJyYXkuaXNBcnJheShjdXJyZW50SXRlbS5jaGlsZHJlbikgJiYgY3VycmVudEl0ZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkVG9PdXRwdXQob2JqLCBjaGVja2VkSGFzaEl0ZW0pIHtcbiAgY29uc3QgY3VycmVudE91dHB1dCA9IG91dHB1dC5nZXQob2JqKTtcbiAgY29uc3QgaXNDaGVja2VkQWxsID0gY2hlY2tlZEhhc2hJdGVtLmlzQ2hlY2tlZEFsbCgpO1xuICBjb25zdCBwYXJlbnRzID0gY2hlY2tlZEhhc2hJdGVtLmdldFBhcmVudHMoKTtcblxuICBpZiAoaXNDaGVja2VkQWxsKSB7XG4gICAgY29uc3QgaXRlbSA9IHBhcmVudHNbcGFyZW50cy5sZW5ndGggLSAxXTtcbiAgICBwYXJlbnRzLnBvcCgpO1xuICAgIGNvbnN0IHBhcmVudElkcyA9IHBhcmVudHMubWFwKGkgPT4gaS5pZCk7XG4gICAgY3VycmVudE91dHB1dC5wdXNoKGdldE91dHB1dE9iamVjdChpdGVtLCBwYXJlbnRJZHMsIGlzQ2hlY2tlZEFsbCkpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNoZWNrZWRJdGVtcyA9IGNoZWNrZWRIYXNoSXRlbS5nZXRDaGVja2VkSXRlbXMoKTtcbiAgICBjb25zdCBwYXJlbnRJZHMgPSBwYXJlbnRzLm1hcChpID0+IGkuaWQpO1xuICAgIGNoZWNrZWRJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjdXJyZW50T3V0cHV0LnB1c2goZ2V0T3V0cHV0T2JqZWN0KGl0ZW0sIHBhcmVudElkcywgaXNDaGVja2VkQWxsKSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hlY2tlZE91dHB1dCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIG91dHB1dC5zZXQodGhpcywgW10pO1xuICB9XG5cbiAgZ2V0ID0gKCkgPT4gb3V0cHV0LmdldCh0aGlzKS5zbGljZSgpO1xuXG4gIGFkZCA9IChjaGVja2VkSGFzaEl0ZW0pID0+IHtcbiAgICBhZGRUb091dHB1dCh0aGlzLCBjaGVja2VkSGFzaEl0ZW0pO1xuICB9XG5cbiAgY2xlYXIgPSAoKSA9PiB7XG4gICAgb3V0cHV0LmdldCh0aGlzKS5zcGxpY2UoMCk7XG4gIH1cbn1cbiJdfQ==