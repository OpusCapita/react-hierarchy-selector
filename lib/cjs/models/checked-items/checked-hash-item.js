"use strict";

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable array-callback-return */

var parents = new WeakMap();
var checkedAll = new WeakMap();
var checkedItemsBackUp = new WeakMap();
var checkedItems = new WeakMap();

function addChildren(that, item) {
  if (item) {
    if (item.children && Array.isArray(item.children) && item.children.length > 0) {
      item.children.forEach(function (child) {
        addChildren(that, child);
      });
    } else {
      that.addCheckedItem(item);
    }
  }
}

var CheckedHashItem = function () {
  function CheckedHashItem() {
    var prnts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    _classCallCheck(this, CheckedHashItem);

    this.timestamp = Date.now();
    parents.set(this, prnts.slice());
    checkedAll.set(this, false);
    checkedItems.set(this, []);
    checkedItemsBackUp.set(this, []);
  }

  CheckedHashItem.prototype.getParents = function getParents() {
    return parents.get(this).slice();
  };

  CheckedHashItem.prototype.getCheckedItems = function getCheckedItems() {
    return checkedItems.get(this).slice();
  };

  CheckedHashItem.prototype.checkAll = function checkAll() {
    var prnts = parents.get(this);
    checkedAll.set(this, true);
    this.clearChecked();
    var initialParent = prnts.length > 0 ? prnts[prnts.length - 1] : undefined;

    if (initialParent) addChildren(this, initialParent);
  };

  CheckedHashItem.prototype.uncheckAll = function uncheckAll() {
    checkedAll.set(this, false);
    this.clearChecked();
  };

  CheckedHashItem.prototype.isCheckedAll = function isCheckedAll() {
    return checkedAll.get(this);
  };

  CheckedHashItem.prototype.clearChecked = function clearChecked() {
    checkedItems.get(this).splice(0);
  };

  CheckedHashItem.prototype.addCheckedItem = function addCheckedItem(item) {
    checkedItems.get(this).push(item);
  };

  CheckedHashItem.prototype.removeCheckedItem = function removeCheckedItem(item) {
    var items = checkedItems.get(this);
    items.reduceRight(function (acc, currentItem, index, currentItems) {
      if (currentItem.id === item.id) {
        currentItems.splice(index, 1);
      }
    }, []);
  };

  CheckedHashItem.prototype.createCopy = function createCopy() {
    var copy = new CheckedHashItem();

    parents.set(copy, [].concat(parents.get(this)));
    checkedAll.set(copy, checkedAll.get(this));
    checkedItems.set(copy, [].concat(checkedItems.get(this)));
    checkedItemsBackUp.set(copy, [].concat(checkedItemsBackUp.get(this)));

    return copy;
  };

  CheckedHashItem.prototype.makeBackUp = function makeBackUp() {
    checkedItemsBackUp.set(this, [].concat(checkedItems.get(this)));
  };

  CheckedHashItem.prototype.restoreFromBackUp = function restoreFromBackUp() {
    checkedItems.set(this, [].concat(checkedItemsBackUp.get(this)));
  };

  return CheckedHashItem;
}();

exports.default = CheckedHashItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbHMvY2hlY2tlZC1pdGVtcy9jaGVja2VkLWhhc2gtaXRlbS5qcyJdLCJuYW1lcyI6WyJwYXJlbnRzIiwiV2Vha01hcCIsImNoZWNrZWRBbGwiLCJjaGVja2VkSXRlbXNCYWNrVXAiLCJjaGVja2VkSXRlbXMiLCJhZGRDaGlsZHJlbiIsInRoYXQiLCJpdGVtIiwiY2hpbGRyZW4iLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJmb3JFYWNoIiwiY2hpbGQiLCJhZGRDaGVja2VkSXRlbSIsIkNoZWNrZWRIYXNoSXRlbSIsInBybnRzIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsInNldCIsInNsaWNlIiwiZ2V0UGFyZW50cyIsImdldCIsImdldENoZWNrZWRJdGVtcyIsImNoZWNrQWxsIiwiY2xlYXJDaGVja2VkIiwiaW5pdGlhbFBhcmVudCIsInVuZGVmaW5lZCIsInVuY2hlY2tBbGwiLCJpc0NoZWNrZWRBbGwiLCJzcGxpY2UiLCJwdXNoIiwicmVtb3ZlQ2hlY2tlZEl0ZW0iLCJpdGVtcyIsInJlZHVjZVJpZ2h0IiwiYWNjIiwiY3VycmVudEl0ZW0iLCJpbmRleCIsImN1cnJlbnRJdGVtcyIsImlkIiwiY3JlYXRlQ29weSIsImNvcHkiLCJtYWtlQmFja1VwIiwicmVzdG9yZUZyb21CYWNrVXAiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUVBLElBQU1BLFVBQVUsSUFBSUMsT0FBSixFQUFoQjtBQUNBLElBQU1DLGFBQWEsSUFBSUQsT0FBSixFQUFuQjtBQUNBLElBQU1FLHFCQUFxQixJQUFJRixPQUFKLEVBQTNCO0FBQ0EsSUFBTUcsZUFBZSxJQUFJSCxPQUFKLEVBQXJCOztBQUVBLFNBQVNJLFdBQVQsQ0FBcUJDLElBQXJCLEVBQTJCQyxJQUEzQixFQUFpQztBQUMvQixNQUFJQSxJQUFKLEVBQVU7QUFDUixRQUFJQSxLQUFLQyxRQUFMLElBQWlCQyxNQUFNQyxPQUFOLENBQWNILEtBQUtDLFFBQW5CLENBQWpC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aUN2QyxtQkFBbUJvQixHQUFuQixDQUF1QixJQUF2QixDQUFqQzs7QUFFQSxXQUFPbUIsSUFBUDtBQUNELEc7OzRCQUVEQyxVLHlCQUFhO0FBQ1h4Qyx1QkFBbUJpQixHQUFuQixDQUF1QixJQUF2QixZQUFpQ2hCLGFBQWFtQixHQUFiLENBQWlCLElBQWpCLENBQWpDO0FBQ0QsRzs7NEJBRURxQixpQixnQ0FBb0I7QUFDbEJ4QyxpQkFBYWdCLEdBQWIsQ0FBaUIsSUFBakIsWUFBMkJqQixtQkFBbUJvQixHQUFuQixDQUF1QixJQUF2QixDQUEzQjtBQUNELEc7Ozs7O2tCQXJFa0JSLGUiLCJmaWxlIjoiY2hlY2tlZC1oYXNoLWl0ZW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBhcnJheS1jYWxsYmFjay1yZXR1cm4gKi9cblxuY29uc3QgcGFyZW50cyA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBjaGVja2VkQWxsID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGNoZWNrZWRJdGVtc0JhY2tVcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBjaGVja2VkSXRlbXMgPSBuZXcgV2Vha01hcCgpO1xuXG5mdW5jdGlvbiBhZGRDaGlsZHJlbih0aGF0LCBpdGVtKSB7XG4gIGlmIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0uY2hpbGRyZW4gJiYgQXJyYXkuaXNBcnJheShpdGVtLmNoaWxkcmVuKSAmJiBpdGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGl0ZW0uY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHsgYWRkQ2hpbGRyZW4odGhhdCwgY2hpbGQpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5hZGRDaGVja2VkSXRlbShpdGVtKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hlY2tlZEhhc2hJdGVtIHtcbiAgY29uc3RydWN0b3IocHJudHMgPSBbXSkge1xuICAgIHRoaXMudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICBwYXJlbnRzLnNldCh0aGlzLCBwcm50cy5zbGljZSgpKTtcbiAgICBjaGVja2VkQWxsLnNldCh0aGlzLCBmYWxzZSk7XG4gICAgY2hlY2tlZEl0ZW1zLnNldCh0aGlzLCBbXSk7XG4gICAgY2hlY2tlZEl0ZW1zQmFja1VwLnNldCh0aGlzLCBbXSk7XG4gIH1cblxuICBnZXRQYXJlbnRzKCkge1xuICAgIHJldHVybiBwYXJlbnRzLmdldCh0aGlzKS5zbGljZSgpO1xuICB9XG5cbiAgZ2V0Q2hlY2tlZEl0ZW1zKCkge1xuICAgIHJldHVybiBjaGVja2VkSXRlbXMuZ2V0KHRoaXMpLnNsaWNlKCk7XG4gIH1cblxuICBjaGVja0FsbCgpIHtcbiAgICBjb25zdCBwcm50cyA9IHBhcmVudHMuZ2V0KHRoaXMpO1xuICAgIGNoZWNrZWRBbGwuc2V0KHRoaXMsIHRydWUpO1xuICAgIHRoaXMuY2xlYXJDaGVja2VkKCk7XG4gICAgY29uc3QgaW5pdGlhbFBhcmVudCA9IHBybnRzLmxlbmd0aCA+IDAgPyBwcm50c1twcm50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChpbml0aWFsUGFyZW50KSBhZGRDaGlsZHJlbih0aGlzLCBpbml0aWFsUGFyZW50KTtcbiAgfVxuXG4gIHVuY2hlY2tBbGwoKSB7XG4gICAgY2hlY2tlZEFsbC5zZXQodGhpcywgZmFsc2UpO1xuICAgIHRoaXMuY2xlYXJDaGVja2VkKCk7XG4gIH1cblxuICBpc0NoZWNrZWRBbGwoKSB7XG4gICAgcmV0dXJuIGNoZWNrZWRBbGwuZ2V0KHRoaXMpO1xuICB9XG5cbiAgY2xlYXJDaGVja2VkKCkge1xuICAgIGNoZWNrZWRJdGVtcy5nZXQodGhpcykuc3BsaWNlKDApO1xuICB9XG5cbiAgYWRkQ2hlY2tlZEl0ZW0oaXRlbSkge1xuICAgIGNoZWNrZWRJdGVtcy5nZXQodGhpcykucHVzaChpdGVtKTtcbiAgfVxuXG4gIHJlbW92ZUNoZWNrZWRJdGVtKGl0ZW0pIHtcbiAgICBjb25zdCBpdGVtcyA9IGNoZWNrZWRJdGVtcy5nZXQodGhpcyk7XG4gICAgaXRlbXMucmVkdWNlUmlnaHQoKGFjYywgY3VycmVudEl0ZW0sIGluZGV4LCBjdXJyZW50SXRlbXMpID0+IHtcbiAgICAgIGlmIChjdXJyZW50SXRlbS5pZCA9PT0gaXRlbS5pZCkge1xuICAgICAgICBjdXJyZW50SXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9LCBbXSk7XG4gIH1cblxuICBjcmVhdGVDb3B5KCkge1xuICAgIGNvbnN0IGNvcHkgPSBuZXcgQ2hlY2tlZEhhc2hJdGVtKCk7XG5cbiAgICBwYXJlbnRzLnNldChjb3B5LCBbLi4ucGFyZW50cy5nZXQodGhpcyldKTtcbiAgICBjaGVja2VkQWxsLnNldChjb3B5LCBjaGVja2VkQWxsLmdldCh0aGlzKSk7XG4gICAgY2hlY2tlZEl0ZW1zLnNldChjb3B5LCBbLi4uY2hlY2tlZEl0ZW1zLmdldCh0aGlzKV0pO1xuICAgIGNoZWNrZWRJdGVtc0JhY2tVcC5zZXQoY29weSwgWy4uLmNoZWNrZWRJdGVtc0JhY2tVcC5nZXQodGhpcyldKTtcblxuICAgIHJldHVybiBjb3B5O1xuICB9XG5cbiAgbWFrZUJhY2tVcCgpIHtcbiAgICBjaGVja2VkSXRlbXNCYWNrVXAuc2V0KHRoaXMsIFsuLi5jaGVja2VkSXRlbXMuZ2V0KHRoaXMpXSk7XG4gIH1cblxuICByZXN0b3JlRnJvbUJhY2tVcCgpIHtcbiAgICBjaGVja2VkSXRlbXMuc2V0KHRoaXMsIFsuLi5jaGVja2VkSXRlbXNCYWNrVXAuZ2V0KHRoaXMpXSk7XG4gIH1cbn1cbiJdfQ==